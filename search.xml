<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Django搭建简易博客(5)</title>
      <link href="/2022/02/21/django-da-jian-jian-yi-bo-ke-5/"/>
      <url>/2022/02/21/django-da-jian-jian-yi-bo-ke-5/</url>
      
        <content type="html"><![CDATA[<h2 id="创建博客文章"><a href="#创建博客文章" class="headerlink" title="创建博客文章"></a>创建博客文章</h2><h3 id="添加表单"><a href="#添加表单" class="headerlink" title="添加表单"></a>添加表单</h3><p>让用户输入并提交信息的页面都是表单，在Django中，创建表单的最简单方式就是使用 ModelForm， 他根据我们定义的模型中的信息自动创建表单。</p><p>接下来在文件夹 blogs 中创建一个名为 <code>forms.py</code> 的文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django <span class="token keyword">import</span> forms<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> BlogPost<span class="token keyword">class</span> <span class="token class-name">BlogForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> BlogPost        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">]</span>        labels <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'title'</span><span class="token punctuation">:</span> <span class="token string">'Title'</span><span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">:</span> <span class="token string">'Text'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先导入模块 <code>forms</code> 以及要使用的模型 <code>BlogPost</code> ，定义一个名为 <code>BlogForm</code> 的表单，它继承了 <code>forms.ModelForm</code>。最简单的 <code>ModelForm</code> 只包含一个内嵌的 <code>Meta</code> 类，它告诉 Django 根据哪个模型创建表单以及在表单中包含哪些字段。</p><ul><li><code>Model</code> 根据模型 <code>BlogPost</code> 创建表单</li><li><code>fields</code> 只包含 <code>title</code> 和 <code>text</code> 字段</li><li><code>lables</code> 为字段生成标签</li></ul><h3 id="URL模式"><a href="#URL模式" class="headerlink" title="URL模式"></a>URL模式</h3><p>当用户要创建博客文章时，我们切换到 <a href="http://127.0.0.1:8000/new_blog/">http://127.0.0.1:8000/new_blog/</a> 。下面时页面 new_blog 的 URL 模式，将其添加到 <code>blogs/urls.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span> snip <span class="token operator">-</span><span class="token operator">-</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token operator">-</span><span class="token operator">-</span> snip <span class="token operator">-</span><span class="token operator">-</span>    path<span class="token punctuation">(</span><span class="token string">'new_blog/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>new_blog<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'new_blog'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h3><p>函数 <code>new_blog()</code> 需要处理两种情形，一种时刚进入 <code>new_blog</code> 页面（在这种情况下应显示空表单）；二是对提交的表单进行处理，并将用户重定向到页面 blogs ：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token punctuation">,</span> redirect<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> BlogPost<span class="token keyword">from</span> <span class="token punctuation">.</span>forms <span class="token keyword">import</span> BlogForm<span class="token operator">-</span><span class="token operator">-</span> snip <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">def</span> <span class="token function">new_blog</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">!=</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> BlogForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> BlogForm<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            form<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'blogs:blog'</span><span class="token punctuation">,</span> blog_id<span class="token operator">=</span>form<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>    context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'form'</span><span class="token punctuation">:</span> form<span class="token punctuation">}</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'blogs/new_blog.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们导入了函数 <code>redirect</code> ，用户提交文章后将会使用这个函数重定向到页面 blog 。函数 <code>redirect</code> 将视图名作为参数，并将用户重定向到这个视图。</p><h3 id="GET请求和POST请求"><a href="#GET请求和POST请求" class="headerlink" title="GET请求和POST请求"></a>GET请求和POST请求</h3><blockquote><p>摸鱼很久之后来更新一下QwQ，同时也是因为刚开学没什么事情要做</p></blockquote><p>创建 Web 应用程序时，将用到的两种请求类型是 GET 请求和 POST 请求。对于只是从服务器读取数据的页面，使用 GET 请求；在用户需要通过表单提交信息时，通常使用 POST 请求。</p><p>函数 <code>new_blog()</code> 将请求对象作为参数。用户初次请求该页面时，其浏览器会发送 GET 请求；用户填写并提交表单时，其浏览器会发送 POST 请求。</p><p>首先测试请求方法是 GET 还是 POST。如果请求方法不是 POST，请求就可能是GET，因此需要返回一个空表单。下面创建一个 <code>BlogForm</code> 实例，将其赋给变量 <code>form</code> ，再通过上下文字典 <code>context</code> 将这个表单发送给模板。</p><p>要将提交的信息保存到数据库，必须先通过检查确定它们是有效的。方法 <code>is_valid()</code> 核实用户填写了所有必不可少的字段，且与输入字段要求的字段类型一样，则可以调用 <code>save()</code> 保存到数据库。接着可以使用 <code>redirect()</code> 将用户的浏览器重定向到页面新创建的博客页面 <code>blog</code> 。</p><h3 id="模板-new-blog"><a href="#模板-new-blog" class="headerlink" title="模板 new_blog"></a>模板 new_blog</h3><p>在 <code>templates/blogs</code> 创建模板为 <code>templates/blogs/new_blog.html</code>:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">{% extends "blogs/base.html" %}{% block content %}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>blogs:new_blog<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    {% csrf_token %}    {% form.as_p %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Add blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>{% endblock content %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个模板继承了 <code>base.html</code>，因此其基本结构与其他界面相同。实参 <code>action</code> 告诉服务器将提交的表单数据发送到哪里。这里将它发给视图函数 <code>new_blog()</code> 。实参 <code>method</code> 让浏览器以 POST 请求的方式提交数据。</p><p>Django 使用模板标签 <code>{% csrf_token %}</code> 来防止攻击者利用表单来获得对服务器未经授权的访问。<code>{{ form.as_p }}</code> 可以让 Django 自动创建显示表单所需的全部字段。修饰符 <code>as_p</code> 让 Django 以<strong>段落</strong>格式渲染所有表单元素。</p><h3 id="链接到页面-new-blog"><a href="#链接到页面-new-blog" class="headerlink" title="链接到页面 new_blog"></a>链接到页面 new_blog</h3><p>在页面 <code>blogs</code> 中添加到页面 <code>new_blog</code> 的链接：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">{% extends "blogs/base.html" %}{% block content %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>        -- snip --<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>blogs:new_blog<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>New blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>{% endblock content %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django搭建简易博客(4)</title>
      <link href="/2022/02/12/django-da-jian-jian-yi-bo-ke-4/"/>
      <url>/2022/02/12/django-da-jian-jian-yi-bo-ke-4/</url>
      
        <content type="html"><![CDATA[<h2 id="创建博客文章"><a href="#创建博客文章" class="headerlink" title="创建博客文章"></a>创建博客文章</h2><h3 id="添加表单"><a href="#添加表单" class="headerlink" title="添加表单"></a>添加表单</h3><p>让用户输入并提交信息的页面都是表单，在Django中，创建表单的最简单方式就是使用 ModelForm， 他根据我们定义的模型中的信息自动创建表单。</p><p>接下来在文件夹 blogs 中创建一个名为 <code>forms.py</code> 的文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django <span class="token keyword">import</span> forms<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> BlogPost<span class="token keyword">class</span> <span class="token class-name">BlogForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> BlogPost        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">]</span>        labels <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'title'</span><span class="token punctuation">:</span> <span class="token string">'Title'</span><span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">:</span> <span class="token string">'Text'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先导入模块 <code>forms</code> 以及要使用的模型 <code>BlogPost</code> ，定义一个名为 <code>BlogForm</code> 的表单，它继承了 <code>forms.ModelForm</code>。最简单的 <code>ModelForm</code> 只包含一个内嵌的 <code>Meta</code> 类，它告诉 Django 根据哪个模型创建表单以及在表单中包含哪些字段。</p><ul><li><code>Model</code> 根据模型 <code>BlogPost</code> 创建表单</li><li><code>fields</code> 只包含 <code>title</code> 和 <code>text</code> 字段</li><li><code>lables</code> 为字段生成标签</li></ul><h3 id="URL模式"><a href="#URL模式" class="headerlink" title="URL模式"></a>URL模式</h3><p>当用户要创建博客文章时，我们切换到 <a href="http://127.0.0.1:8000/new_blog/">http://127.0.0.1:8000/new_blog/</a> 。下面时页面 new_blog 的 URL 模式，将其添加到 <code>blogs/urls.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span> snip <span class="token operator">-</span><span class="token operator">-</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token operator">-</span><span class="token operator">-</span> snip <span class="token operator">-</span><span class="token operator">-</span>    path<span class="token punctuation">(</span><span class="token string">'new_blog/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>new_blog<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'new_blog'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h3><p>函数 <code>new_blog()</code> 需要处理两种情形，一种时刚进入 <code>new_blog</code> 页面（在这种情况下应显示空表单）；二是对提交的表单进行处理，并将用户重定向到页面 blogs ：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token punctuation">,</span> redirect<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> BlogPost<span class="token keyword">from</span> <span class="token punctuation">.</span>forms <span class="token keyword">import</span> BlogForm<span class="token operator">-</span><span class="token operator">-</span> snip <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">def</span> <span class="token function">new_blog</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">!=</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> BlogForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> BlogForm<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            form<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'blogs:blog'</span><span class="token punctuation">,</span> blog_id<span class="token operator">=</span>form<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>    context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'form'</span><span class="token punctuation">:</span> form<span class="token punctuation">}</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'blogs/new_blog.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们导入了函数 <code>redirect</code> ，用户提交文章后将会使用这个函数重定向到页面 blog 。函数 <code>redirect</code> 将视图名作为参数，并将用户重定向到这个视图。</p><h3 id="GET请求和POST请求"><a href="#GET请求和POST请求" class="headerlink" title="GET请求和POST请求"></a>GET请求和POST请求</h3><blockquote><p>摸鱼很久之后来更新一下QwQ，同时也是因为刚开学没什么事情要做</p></blockquote><p>创建 Web 应用程序时，将用到的两种请求类型是 GET 请求和 POST 请求。对于只是从服务器读取数据的页面，使用 GET 请求；在用户需要通过表单提交信息时，通常使用 POST 请求。</p><p>函数 <code>new_blog()</code> 将请求对象作为参数。用户初次请求该页面时，其浏览器会发送 GET 请求；用户填写并提交表单时，其浏览器会发送 POST 请求。</p><p>首先测试请求方法是 GET 还是 POST。如果请求方法不是 POST，请求就可能是GET，因此需要返回一个空表单。下面创建一个 <code>BlogForm</code> 实例，将其赋给变量 <code>form</code> ，再通过上下文字典 <code>context</code> 将这个表单发送给模板。</p><p>要将提交的信息保存到数据库，必须先通过检查确定它们是有效的。方法 <code>is_valid()</code> 核实用户填写了所有必不可少的字段，且与输入字段要求的字段类型一样，则可以调用 <code>save()</code> 保存到数据库。接着可以使用 <code>redirect()</code> 将用户的浏览器重定向到页面新创建的博客页面 <code>blog</code> 。</p><h3 id="模板-new-blog"><a href="#模板-new-blog" class="headerlink" title="模板 new_blog"></a>模板 new_blog</h3><p>在 <code>templates/blogs</code> 创建模板为 <code>templates/blogs/new_blog.html</code>:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">{% extends "blogs/base.html" %}{% block content %}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>blogs:new_blog<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    {% csrf_token %}    {% form.as_p %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Add blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>{% endblock content %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个模板继承了 <code>base.html</code>，因此其基本结构与其他界面相同。实参 <code>action</code> 告诉服务器将提交的表单数据发送到哪里。这里将它发给视图函数 <code>new_blog()</code> 。实参 <code>method</code> 让浏览器以 POST 请求的方式提交数据。</p><p>Django 使用模板标签 <code>{% csrf_token %}</code> 来防止攻击者利用表单来获得对服务器未经授权的访问。<code>{{ form.as_p }}</code> 可以让 Django 自动创建显示表单所需的全部字段。修饰符 <code>as_p</code> 让 Django 以<strong>段落</strong>格式渲染所有表单元素。</p><h3 id="链接到页面-new-blog"><a href="#链接到页面-new-blog" class="headerlink" title="链接到页面 new_blog"></a>链接到页面 new_blog</h3><p>在页面 <code>blogs</code> 中添加到页面 <code>new_blog</code> 的链接：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">{% extends "blogs/base.html" %}{% block content %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>        -- snip --<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>blogs:new_blog<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>New blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>{% endblock content %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django搭建简易博客(3)</title>
      <link href="/2022/02/12/django-da-jian-jian-yi-bo-ke-3/"/>
      <url>/2022/02/12/django-da-jian-jian-yi-bo-ke-3/</url>
      
        <content type="html"><![CDATA[<h2 id="创建页面：-学习笔记主页"><a href="#创建页面：-学习笔记主页" class="headerlink" title="创建页面： 学习笔记主页"></a>创建页面： 学习笔记主页</h2><blockquote><p>请牢记：使用 Django 创建页面的过程分为三个阶段： 定义URL，编写视图和编写模板（按什么顺序完成这三个阶段无关紧要）</p></blockquote><h3 id="映射URL"><a href="#映射URL" class="headerlink" title="映射URL"></a>映射URL</h3><blockquote><p>每个 URL 都被映射到特定的试图——试图函数获取并处理页面所有数据。视图函数通常使用<strong>模板</strong>来渲染页面。</p></blockquote><p>主页的 URL 最重要，它是用户用来访问项目的基础 URL。当前，基础 URL （127.0.0.1:8000) 返回默认的 Django 网站。</p><p>打开项目主文件夹 Blog 中的文件 <code>urls.py</code>， 你将看到：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> pathurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了让项目程序能够包含应用程序 blogs 的 URL，将代码修改为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> includeurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'blogs.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：接下来需要在文件夹 blogs 中创建一个urls.py 文件，大概树形结构如下：</p></blockquote><pre class="line-numbers language-none"><code class="language-none">├── admin.py├── apps.py├── __init__.py├── migrations├──├── models.py├── tests.py├── urls.py└── views.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>urls.py</code> 中输入代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsapp_name <span class="token operator">=</span> <span class="token string">'blogs'</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>index<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># 主页</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>请注意：views.index 将在下面编写</p></blockquote><p>变量 <code>app_name</code> 让 Django 能够将这个 urls.py 文件同项目内其他应用程序中的同名文件区分开来</p><p>变量 <code>urlpatterns</code> 是一个列表，包含可以在应用程序 blogs 中请求的页面</p><p>实际的 URL 模式是对函数 <code>path()</code> 的调用，这个函数接受三个实参：第一个参数是路由(route)，第二个参数指定了调用 <code>views.py</code> 中的哪个函数，第三个参数指定这个 URL 模式的名称，<strong>让我们能够在代码的其他地方引用它，每当需要提供这个主页的链接时，都将使用这个名称，而不是 URL</strong></p><h3 id="编写视图"><a href="#编写视图" class="headerlink" title="编写视图"></a>编写视图</h3><blockquote><p>视图函数接受请求中的信息，准备好生成页面所需的数据，再将这些数据发送给浏览器</p></blockquote><p>在文件夹 blogs 中的 <code>views.py</code> 中添加为主页编写视图的代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token comment"># Create your views here.</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'blogs/index.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>URL 请求与刚才定义的模式匹配时，Django将在文件 view.py 中查找函数 <code>index()</code>，再将对象 <code>request</code> 传递给这个视图函数</p><h3 id="编写模板"><a href="#编写模板" class="headerlink" title="编写模板"></a>编写模板</h3><blockquote><p>模板定义页面的外观，而每当页面被请求时，Django将填入相关的数据。模板让你能够访问视图提供的任何数据。</p></blockquote><p>在文件夹 blogs 中新建一个文件夹，并将其命名为 templates 。在文件夹 templates 中，再创建一个文件夹，并将其命名为 blogs 。在 blogs 里面创建一个文件 <code>index.html</code>（这个文件的路径为<code>blogs/templates/blogs/index.html</code>，并且编写如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Welcome to BlogPost<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>In BlogPost, you can share whatever you want to share!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在，如果请求这个项目的主页，就可以看到上述页面。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django搭建简易博客(2)</title>
      <link href="/2022/02/12/django-da-jian-jian-yi-bo-ke-2/"/>
      <url>/2022/02/12/django-da-jian-jian-yi-bo-ke-2/</url>
      
        <content type="html"><![CDATA[<h2 id="Django管理网站"><a href="#Django管理网站" class="headerlink" title="Django管理网站"></a>Django管理网站</h2><h3 id="创建超级用户"><a href="#创建超级用户" class="headerlink" title="创建超级用户"></a>创建超级用户</h3><p>Django 允许创建具备所有权限的用户，即<strong>超级用户</strong>。<strong>权限</strong>决定了用户可执行的操作。注册用户通常可以阅读自己的私有数据，还可以查看一些只有会员才能查看的信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python manage.py createsuperuser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行命令<code>createsuperuser</code>时，Django 会提示输入超级用户的用户名，邮箱（可为空），以及两次密码。</p><h3 id="向管理网站注册模型"><a href="#向管理网站注册模型" class="headerlink" title="向管理网站注册模型"></a>向管理网站注册模型</h3><p>Django 自动在管理网站中添加了一些模型， 如 User 和 Group， 但对于我们创建的模型，必须手工进行注册。</p><p>在 blog 的 <code>admin.py</code> 中，注册模型 <code>BlogPost</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> BlogPost<span class="token comment"># Register your models here.</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>BlogPost<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django搭建简易博客(1)</title>
      <link href="/2022/02/11/django-da-jian-jian-yi-bo-ke-1/"/>
      <url>/2022/02/11/django-da-jian-jian-yi-bo-ke-1/</url>
      
        <content type="html"><![CDATA[<h2 id="创建Django项目"><a href="#创建Django项目" class="headerlink" title="创建Django项目"></a>创建Django项目</h2><p>创建名为“Blog”的django项目程序：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">django-admin startproject Blog <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>一定要有这个 “.”   它可以让项目拥有合适的目录结构</p></blockquote><p> Django将大部分与项目相关的信息存储在数据库当中，因此需要创建一个供Django使用的数据库。Django默认的数据库为sqlite，这里我们将其改为MySQL：</p><p>找到<code>settings.py</code>中的<code>DATABASES</code>，将其改为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'blogpost'</span><span class="token punctuation">,</span>   <span class="token comment"># 你数据库的名称</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">'*******'</span><span class="token punctuation">,</span><span class="token comment"># 你的密码</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token number">3306</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着迁移数据库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python manage.py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看项目效果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python manage.py runserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>按Ctrl + C退出</p></blockquote><p>可以看到项目是英文的，可以在<code>settings.py</code>中找到并修改：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">'zh-Hans'</span>TIME_ZONE <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="创建Django应用程序"><a href="#创建Django应用程序" class="headerlink" title="创建Django应用程序"></a>创建Django应用程序</h2><h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><p>创建名为“blog”的应用程序：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python manage.py startapp blogs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着在<code>blogs/models.py</code>当中定义模型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">BlogPost</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    objects <span class="token operator">=</span> models<span class="token punctuation">.</span>Manager<span class="token punctuation">(</span><span class="token punctuation">)</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment"># 博客标题</span>    text <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token comment"># 博客正文</span>    date_added <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 博客日期</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title <span class="token comment"># 返回模型的字符串表示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们创建了一个名为 “BlogPost” 的模型，继承了Django中模型基本功能，并且我们添加了三个属性：title、text、date_added</p><p>属性 text 和 title 是由 <code>CharFiled</code> 组成的，即由字符组成的数据，其中参数 <code>max_length</code> 为最大长度</p><p>属性 date_added 是用 <code>DateTimeField</code> 组成的， 记录日期和时间，参数 <code>auto_now_add = True</code> 表示每当用户创建一个新博客时，都会自动的设置为当前日期和时间</p><h3 id="激活模型"><a href="#激活模型" class="headerlink" title="激活模型"></a>激活模型</h3><p>打开<code>settings.py</code>，找到</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后将其修改为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment"># 我的应用程序</span>    <span class="token string">'blogs'</span><span class="token punctuation">,</span><span class="token comment"># 默认添加的应用程序</span>    <span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>务必将自己创建的应用程序放在默认应用程序的前面，这样就能够覆盖默认程序的行为</p></blockquote><p>接下来需要让 Django 修改数据库，使其能够存储与模型 BlogPost 相关的信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python manage.py makemigrations blogspython manage.py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>每当修改 <code>models.py</code> 中的数据时，都需要对应用程序进行 <code>makemigrations</code> 并且 <code>migrate</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/02/11/hello-world/"/>
      <url>/2022/02/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
