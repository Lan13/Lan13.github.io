<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CODH-Lab2</title>
      <link href="/2022/07/04/codh-lab2/"/>
      <url>/2022/07/04/codh-lab2/</url>
      
        <content type="html"><![CDATA[<h1 id="Lab2-实验报告"><a href="#Lab2-实验报告" class="headerlink" title="Lab2 实验报告"></a>Lab2 实验报告</h1><h2 id="1-32x32位的寄存器堆"><a href="#1-32x32位的寄存器堆" class="headerlink" title="1. 32x32位的寄存器堆"></a>1. 32x32位的寄存器堆</h2><h3 id="1-1-核心代码"><a href="#1-1-核心代码" class="headerlink" title="1.1 核心代码"></a>1.1 核心代码</h3><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> REG_FILE #<span class="token punctuation">(</span><span class="token keyword">parameter</span> AW <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">parameter</span> DW <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span>AW<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> ra0<span class="token punctuation">,</span> ra1<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span>DW<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rd0<span class="token punctuation">,</span> rd1<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span>AW<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> wa<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span>DW<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> wd<span class="token punctuation">,</span>    <span class="token keyword">input</span> we<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span>DW<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>AW<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span>DW<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> ini<span class="token punctuation">;</span>    <span class="token keyword">assign</span> ini <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> rd0 <span class="token operator">=</span> we <span class="token operator">?</span> wd <span class="token punctuation">:</span> rf<span class="token punctuation">[</span>ra0<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> rd1 <span class="token operator">=</span> rf<span class="token punctuation">[</span>ra1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>we<span class="token punctuation">)</span> <span class="token keyword">begin</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wa <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                rf<span class="token punctuation">[</span>wa<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> wd<span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token important">always@</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        rf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> ini<span class="token punctuation">;</span><span class="token comment">// 上板时可有可无，但对于仿真文件是需要的</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2-功能仿真"><a href="#1-2-功能仿真" class="headerlink" title="1.2 功能仿真"></a>1.2 功能仿真</h3><h4 id="1-2-1-仿真文件"><a href="#1-2-1-仿真文件" class="headerlink" title="1.2.1 仿真文件"></a>1.2.1 仿真文件</h4><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">tb_regfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> clk<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> ra0<span class="token punctuation">,</span> ra1<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> rd0<span class="token punctuation">,</span> rd1<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> wa<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> wd<span class="token punctuation">;</span>    <span class="token keyword">reg</span> we<span class="token punctuation">;</span>    <span class="token keyword">integer</span> i<span class="token punctuation">;</span>    REG_FILE <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">ra0</span><span class="token punctuation">(</span>ra0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">ra1</span><span class="token punctuation">(</span>ra1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">rd0</span><span class="token punctuation">(</span>rd0<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">rd1</span><span class="token punctuation">(</span>rd1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">wa</span><span class="token punctuation">(</span>wa<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">wd</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">we</span><span class="token punctuation">(</span>we<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">initial</span> <span class="token keyword">begin</span>        clk <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        we <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">forever</span> <span class="token number">#10</span> clk <span class="token operator">=</span> <span class="token operator">~</span>clk<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">initial</span> <span class="token keyword">begin</span>        <span class="token function">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">31</span><span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            wa <span class="token operator">=</span> i<span class="token punctuation">;</span>            wd <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">;</span>            ra0 <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token number">#50</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        ra0 <span class="token operator">=</span> <span class="token number">5'b00011</span><span class="token punctuation">;</span>        wa <span class="token operator">=</span> <span class="token number">5'b00011</span><span class="token punctuation">;</span>        wd <span class="token operator">=</span> <span class="token number">5'b00011</span><span class="token punctuation">;</span>        ra1 <span class="token operator">=</span> <span class="token number">5'b00011</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-2-仿真结果"><a href="#1-2-2-仿真结果" class="headerlink" title="1.2.2 仿真结果"></a>1.2.2 仿真结果</h4><p>首先对所有寄存器初始化一个值，同时可以发现，0号寄存器的值并未更改，还是保持为0：</p><p><img src="/2022/07/04/codh-lab2/regfile_sim_0.png"></p><p>接着在初始化结束后，修改3号寄存器的值，可以发现，数据一写入，输出数据 <code>rd0</code> 立马变化，对比 <code>rd1</code> ，<code>rd1</code> 会先输出上一个时钟周期的数据，然后再时钟上升沿显示出写入数据。所以实际上这是写操作优先的。即当读取的寄存器和访问的寄存器一致时，<code>rd0</code> 会显示当前写入的数据：</p><p><img src="/2022/07/04/codh-lab2/regfile_sim_1.png"></p><h2 id="2-256x16位的分布式和块式RAM-IP核"><a href="#2-256x16位的分布式和块式RAM-IP核" class="headerlink" title="2. 256x16位的分布式和块式RAM IP核"></a>2. 256x16位的分布式和块式RAM IP核</h2><h3 id="2-1-分布式和块式存储器的读操作"><a href="#2-1-分布式和块式存储器的读操作" class="headerlink" title="2.1 分布式和块式存储器的读操作"></a>2.1 分布式和块式存储器的读操作</h3><h4 id="2-1-1-仿真文件"><a href="#2-1-1-仿真文件" class="headerlink" title="2.1.1 仿真文件"></a>2.1.1 仿真文件</h4><p>由于只需要比较分布式和块式存储器的读操作，所以在仿真文件中我们只要将地址进行变化即可：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">tb_mem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> clk<span class="token punctuation">,</span> we<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> d<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> spo<span class="token punctuation">,</span> douta<span class="token punctuation">;</span>    <span class="token keyword">reg</span> ena<span class="token punctuation">;</span>    <span class="token keyword">integer</span> i<span class="token punctuation">;</span>    dist_mem_gen_0 <span class="token function">dist_test</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">we</span><span class="token punctuation">(</span>we<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">spo</span><span class="token punctuation">(</span>spo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    blk_mem_gen_0 <span class="token function">blk_test</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clka</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">wea</span><span class="token punctuation">(</span>we<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">addra</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">dina</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">douta</span><span class="token punctuation">(</span>douta<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">ena</span><span class="token punctuation">(</span>ena<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">initial</span> <span class="token keyword">begin</span>        we <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        ena <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        clk <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">forever</span> <span class="token number">#10</span> clk <span class="token operator">=</span> <span class="token operator">~</span>clk<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">initial</span> <span class="token keyword">begin</span>        <span class="token function">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            a <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token number">#50</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-2-仿真结果"><a href="#2-1-2-仿真结果" class="headerlink" title="2.1.2 仿真结果"></a>2.1.2 仿真结果</h4><p><img src="/dist_blK_read.png"></p><h4 id="2-1-3-对比结果"><a href="#2-1-3-对比结果" class="headerlink" title="2.1.3 对比结果"></a>2.1.3 对比结果</h4><ul><li>块式 RAM 的读取需要时钟信号，分布式 RAM 的读取不需要时钟信号。</li><li>分布式 RAM 的使用更灵活方便些，块式 RAM 的时序性会更好。</li></ul><h3 id="2-2-块式存储器写操作优先和读操作优先"><a href="#2-2-块式存储器写操作优先和读操作优先" class="headerlink" title="2.2 块式存储器写操作优先和读操作优先"></a>2.2 块式存储器写操作优先和读操作优先</h3><h4 id="2-2-1-仿真文件"><a href="#2-2-1-仿真文件" class="headerlink" title="2.2.1 仿真文件"></a>2.2.1 仿真文件</h4><p>既然比较的是块式存储器读操作优先和写操作优先，那么只需要着重注意在写信号有效的时候，这个时候读取的数据是写入前的数据还是写进的数据，因为其余时间读取的结果肯定都是相同的。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">tb_read_write</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> addra<span class="token punctuation">;</span>    <span class="token keyword">reg</span> clka<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> dina<span class="token punctuation">;</span>    <span class="token keyword">reg</span> ena<span class="token punctuation">;</span>    <span class="token keyword">reg</span> wea<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> douta_read<span class="token punctuation">,</span> douta_write<span class="token punctuation">;</span>    blk_mem_gen_0 <span class="token function">write_test</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">addra</span><span class="token punctuation">(</span>addra<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">clka</span><span class="token punctuation">(</span>clka<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">dina</span><span class="token punctuation">(</span>dina<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">ena</span><span class="token punctuation">(</span>ena<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">wea</span><span class="token punctuation">(</span>wea<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">douta</span><span class="token punctuation">(</span>douta_write<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    blk_mem_gen_1 <span class="token function">read_test</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">addra</span><span class="token punctuation">(</span>addra<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">clka</span><span class="token punctuation">(</span>clka<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">dina</span><span class="token punctuation">(</span>dina<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">ena</span><span class="token punctuation">(</span>ena<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">wea</span><span class="token punctuation">(</span>wea<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">douta</span><span class="token punctuation">(</span>douta_read<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">initial</span> <span class="token keyword">begin</span>        ena <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        clka <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        addra <span class="token operator">=</span> <span class="token number">8'b11</span><span class="token punctuation">;</span>        <span class="token keyword">forever</span> <span class="token number">#10</span> clka <span class="token operator">=</span> <span class="token operator">~</span>clka<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">initial</span> <span class="token keyword">begin</span>        <span class="token number">#100</span><span class="token punctuation">;</span>        wea <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        dina <span class="token operator">=</span> <span class="token number">16'b1000</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-仿真结果"><a href="#2-2-2-仿真结果" class="headerlink" title="2.2.2 仿真结果"></a>2.2.2 仿真结果</h4><p><img src="/2022/07/04/codh-lab2/blk_read_write.png"></p><h4 id="2-2-3-对比结果"><a href="#2-2-3-对比结果" class="headerlink" title="2.2.3 对比结果"></a>2.2.3 对比结果</h4><p>可以看出，写操作优先的块式存储器在时钟沿上升的时候直接输出刚写进的数据，而读操作优先的块式存储器在时钟沿的上升的时候保持不变，输出的还是写入前的数据，而当下一个时钟沿上升的时候，输出刚刚写进的数据。</p><p>所以说，写操作优先的块式存储器会直接输出写进的数据，而读操作优先的块式存储器会在下一个时钟周期输出写进的数据，即输出会延迟一个周期。</p><h2 id="3-排序电路的逻辑设计、仿真和下载测试"><a href="#3-排序电路的逻辑设计、仿真和下载测试" class="headerlink" title="3. 排序电路的逻辑设计、仿真和下载测试"></a>3. 排序电路的逻辑设计、仿真和下载测试</h2><h3 id="3-1-逻辑设计"><a href="#3-1-逻辑设计" class="headerlink" title="3.1 逻辑设计"></a>3.1 逻辑设计</h3><blockquote><p>总体思路：由于 DRAM 中只有一个共有的读写端口和一个读端口，所以在交换过程中重新写入需要修改读写端口，导致原来的地址改变，这样是不便于后续交换的。而寄存器堆 REG_FILE 是拥有两个读端口和一个写端口的。所以我的想法是将 DRAM 中的数据先存储到 REG_FILE 寄存器堆内，接着进行排序过程。在排序时，如果两个数据不是有序的，则进行交换存储，由于这时候寄存器堆 <code>REG_FILE</code> 可以保持原地址不变（就是只改变写地址来存数据，而原来的读地址不变），则这次交换完后可以立马进行下一位比较，直至把这个最大的数排到尽可能后面，而这就是冒泡排序的思路，只不过在这里有点类似于把最大的数“沉底”罢了。在寄存器堆内完成排序后，再重新重载回 DRAM 中，这样会极大地方便排序进行。</p></blockquote><h4 id="3-1-1-数据通路"><a href="#3-1-1-数据通路" class="headerlink" title="3.1.1 数据通路"></a>3.1.1 数据通路</h4><p>由于数据通路在电脑上作图实在过于麻烦，所以手绘了一个简易版：</p><p><img src="/2022/07/04/codh-lab2/data_path.jpg"></p><p>其中每个框内代表的是其可能的赋值，用这个来代表数据线，显得比较清晰方便。具体的数据输入对应于每个状态。</p><h4 id="3-1-2-状态转化"><a href="#3-1-2-状态转化" class="headerlink" title="3.1.2 状态转化"></a>3.1.2 状态转化</h4><p>记排序的初始状态为  <code>waiting</code>，所有的数据输入操作都发生 <code>waiting</code> 状态中，这个时候 <code>busy = 0</code> ，使得可以使用 <code>data</code> ，<code>del</code> ，<code>addr</code>，<code>chk</code> 等操作。在按下 <code>run</code> 之后，<code>busy = 1</code> 并且进入下一个状态 <code>loading</code>，即把 DRAM 中的所有数据存储在寄存器堆。在装载完成之后，状态进入到排序状态。<code>sorting</code> 状态中，每次取出两个数，并且用 <code>ALU</code> 进行比较，如果后一个数字比前一个数字小，则会发生交换事件，进入到下一个状态 <code>store1</code>。在 <code>store1</code> 和 <code>store2</code> 两个状态中分别对前后两个数字进行重新存储，完成交换，并且返回到 <code>sorting</code> 状态。其中用一个寄存器 <code>done_cnt</code> 来记录当前这一轮的完成数，当不发生交换事件时，完成数会＋1，当完成数达到数据的总个数时，说明所有数据已经有序，这时候进入到 <code>reload</code> 状态。在 <code>reload</code> 状态中，把寄存器里全部有序的数据重新存储到 DRAM 当中，当存储完成时，进入 <code>finished</code> 状态。最后再把 <code>busy</code> 置为0。</p><p><img src="/2022/07/04/codh-lab2/state_machine.png"></p><h3 id="3-2-核心代码"><a href="#3-2-核心代码" class="headerlink" title="3.2 核心代码"></a>3.2 核心代码</h3><h4 id="3-2-1-ENCODER16"><a href="#3-2-1-ENCODER16" class="headerlink" title="3.2.1 ENCODER16"></a>3.2.1 ENCODER16</h4><p>由于每次 <code>x</code> 只改变一个开关，所以我们可以对其进行枚举，将 <code>h</code> 编码为对应数据。同时又因为每次只有一个开关变化，使得 <code>x</code> 只有一位为高电平，所以脉冲可以使用缩位或 <code>|</code> 运算得到，这样在 <code>x</code> 取边沿之后，<code>p</code> 也是只维持一个周期的。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> ENCODER16 <span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> signal<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> h<span class="token punctuation">,</span>    <span class="token keyword">output</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always@</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">case</span><span class="token punctuation">(</span>signal<span class="token punctuation">)</span>            <span class="token number">16'h0001</span><span class="token punctuation">:</span> h <span class="token operator">=</span> <span class="token number">4'h0</span><span class="token punctuation">;</span>            <span class="token number">16'h0002</span><span class="token punctuation">:</span> h <span class="token operator">=</span> <span class="token number">4'h1</span><span class="token punctuation">;</span>            <span class="token number">16'h0004</span><span class="token punctuation">:</span> h <span class="token operator">=</span> <span class="token number">4'h2</span><span class="token punctuation">;</span>            <span class="token number">16'h0008</span><span class="token punctuation">:</span> h <span class="token operator">=</span> <span class="token number">4'h3</span><span class="token punctuation">;</span>            <span class="token number">16'h0010</span><span class="token punctuation">:</span> h <span class="token operator">=</span> <span class="token number">4'h4</span><span class="token punctuation">;</span>            <span class="token number">16'h0020</span><span class="token punctuation">:</span> h <span class="token operator">=</span> <span class="token number">4'h5</span><span class="token punctuation">;</span>            <span class="token number">16'h0040</span><span class="token punctuation">:</span> h <span class="token operator">=</span> <span class="token number">4'h6</span><span class="token punctuation">;</span>            <span class="token number">16'h0080</span><span class="token punctuation">:</span> h <span class="token operator">=</span> <span class="token number">4'h7</span><span class="token punctuation">;</span>            <span class="token number">16'h0100</span><span class="token punctuation">:</span> h <span class="token operator">=</span> <span class="token number">4'h8</span><span class="token punctuation">;</span>            <span class="token number">16'h0200</span><span class="token punctuation">:</span> h <span class="token operator">=</span> <span class="token number">4'h9</span><span class="token punctuation">;</span>            <span class="token number">16'h0400</span><span class="token punctuation">:</span> h <span class="token operator">=</span> <span class="token number">4'ha</span><span class="token punctuation">;</span>            <span class="token number">16'h0800</span><span class="token punctuation">:</span> h <span class="token operator">=</span> <span class="token number">4'hb</span><span class="token punctuation">;</span>            <span class="token number">16'h1000</span><span class="token punctuation">:</span> h <span class="token operator">=</span> <span class="token number">4'hc</span><span class="token punctuation">;</span>            <span class="token number">16'h2000</span><span class="token punctuation">:</span> h <span class="token operator">=</span> <span class="token number">4'hd</span><span class="token punctuation">;</span>            <span class="token number">16'h4000</span><span class="token punctuation">:</span> h <span class="token operator">=</span> <span class="token number">4'he</span><span class="token punctuation">;</span>            <span class="token number">16'h8000</span><span class="token punctuation">:</span> h <span class="token operator">=</span> <span class="token number">4'hf</span><span class="token punctuation">;</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span>    <span class="token keyword">assign</span> p <span class="token operator">=</span> <span class="token operator">|</span>signal<span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-2-SEG7"><a href="#3-2-2-SEG7" class="headerlink" title="3.2.2 SEG7"></a>3.2.2 SEG7</h4><p>由于数码管是共用显示数据的，使得在同一时刻，只能显示出一个数码管的数据。但是由于人眼视觉暂留效应，控制数码管交替显示时间间隔，如果数码管切换时间足够快，肉眼效果即为多个数码管同时点亮。所以我们需要对其采取时分复用的方式。同时根据多次测试发现，这些管脚都是低电平有效的。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">SEG7</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> mux_s_out<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> an<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> display<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> d<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> addr_sel<span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">case</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span>            <span class="token number">4'h0</span><span class="token punctuation">:</span> display <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">7'b1111110</span><span class="token punctuation">;</span>            <span class="token number">4'h1</span><span class="token punctuation">:</span> display <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">7'b0110000</span><span class="token punctuation">;</span>            <span class="token number">4'h2</span><span class="token punctuation">:</span> display <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">7'b1101101</span><span class="token punctuation">;</span>            <span class="token number">4'h3</span><span class="token punctuation">:</span> display <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">7'b1111001</span><span class="token punctuation">;</span>            <span class="token number">4'h4</span><span class="token punctuation">:</span> display <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">7'b0110011</span><span class="token punctuation">;</span>            <span class="token number">4'h5</span><span class="token punctuation">:</span> display <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">7'b1011011</span><span class="token punctuation">;</span>            <span class="token number">4'h6</span><span class="token punctuation">:</span> display <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">7'b1011111</span><span class="token punctuation">;</span>            <span class="token number">4'h7</span><span class="token punctuation">:</span> display <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">7'b1110000</span><span class="token punctuation">;</span>            <span class="token number">4'h8</span><span class="token punctuation">:</span> display <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">7'b1111111</span><span class="token punctuation">;</span>            <span class="token number">4'h9</span><span class="token punctuation">:</span> display <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">7'b1111011</span><span class="token punctuation">;</span>            <span class="token number">4'hA</span><span class="token punctuation">:</span> display <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">7'b1110111</span><span class="token punctuation">;</span>            <span class="token number">4'hB</span><span class="token punctuation">:</span> display <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">7'b0011111</span><span class="token punctuation">;</span>            <span class="token number">4'hC</span><span class="token punctuation">:</span> display <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">7'b1001110</span><span class="token punctuation">;</span>            <span class="token number">4'hD</span><span class="token punctuation">:</span> display <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">7'b0111101</span><span class="token punctuation">;</span>            <span class="token number">4'hE</span><span class="token punctuation">:</span> display <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">7'b1001111</span><span class="token punctuation">;</span>            <span class="token number">4'hF</span><span class="token punctuation">:</span> display <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">7'b1000111</span><span class="token punctuation">;</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span>    <span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        addr_sel <span class="token operator">&lt;=</span> addr_sel <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always@</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">case</span><span class="token punctuation">(</span>addr_sel<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token number">3'b000</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                an <span class="token operator">=</span> <span class="token number">8'hFE</span><span class="token punctuation">;</span>                d <span class="token operator">=</span> mux_s_out<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">3'b001</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                an <span class="token operator">=</span> <span class="token number">8'hFD</span><span class="token punctuation">;</span>                d <span class="token operator">=</span> mux_s_out<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">3'b010</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                an <span class="token operator">=</span> <span class="token number">8'hFB</span><span class="token punctuation">;</span>                d <span class="token operator">=</span> mux_s_out<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">3'b011</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                an <span class="token operator">=</span> <span class="token number">8'hF7</span><span class="token punctuation">;</span>                d <span class="token operator">=</span> mux_s_out<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">3'b100</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                an <span class="token operator">=</span> <span class="token number">8'hBF</span><span class="token punctuation">;</span>                d <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">3'b101</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                an <span class="token operator">=</span> <span class="token number">8'h7F</span><span class="token punctuation">;</span>                d <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                an <span class="token operator">=</span> <span class="token number">8'hFF</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-3-BTN-CLEAN"><a href="#3-2-3-BTN-CLEAN" class="headerlink" title="3.2.3 BTN_CLEAN"></a>3.2.3 BTN_CLEAN</h4><p>由于这次需要去抖动的开关比较多，同时又因为 <code>x</code> 每次只改变一位数据的特性，我们可以设计如下去除抖动的代码，直接对所有开关一起进行去除抖动。</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> BTN_CLEAN #<span class="token punctuation">(</span><span class="token keyword">parameter</span> WIDTH <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> btn<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> btn_clean <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">integer</span> i<span class="token punctuation">;</span>    <span class="token keyword">genvar</span> j<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> btn_cnt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> WIDTH <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            <span class="token function">if</span><span class="token punctuation">(</span>btn<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span>                btn_cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">4'h0</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>btn_cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">4'hF</span><span class="token punctuation">)</span>                btn_cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> btn_cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                btn_cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> btn_cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token function">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> WIDTH <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token keyword">assign</span> btn_clean<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> btn_cnt<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-4-BTN-EDGE"><a href="#3-2-4-BTN-EDGE" class="headerlink" title="3.2.4 BTN_EDGE"></a>3.2.4 BTN_EDGE</h4><p>不同于之前，这里要求的是在 <code>x</code> 向上拨动和向下拨动都能得到一个数据，所以要进行双边检验，在上下边缘都取一次信号：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> BTN_EDGE #<span class="token punctuation">(</span><span class="token keyword">parameter</span> WIDTH <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> btn<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> btn_edge<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> btn1<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> btn2<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">integer</span> i<span class="token punctuation">;</span>    <span class="token keyword">genvar</span> j<span class="token punctuation">;</span>    <span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> WIDTH <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            btn1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> btn<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> WIDTH <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>            btn2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> btn1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token function">for</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> WIDTH <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token keyword">assign</span> btn_edge<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>btn1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">~</span>btn2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span>btn1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>btn2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-5-SORT"><a href="#3-2-5-SORT" class="headerlink" title="3.2.5 SORT"></a>3.2.5 SORT</h4><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">SORT</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span>    <span class="token keyword">input</span> rst<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> x<span class="token punctuation">,</span>    <span class="token keyword">input</span> del<span class="token punctuation">,</span>    <span class="token keyword">input</span> addr<span class="token punctuation">,</span>    <span class="token keyword">input</span> data<span class="token punctuation">,</span>    <span class="token keyword">input</span> chk<span class="token punctuation">,</span>    <span class="token keyword">input</span> run<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> an<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> seg<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> busy<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> x_clean<span class="token punctuation">,</span> x_clean2<span class="token punctuation">,</span> x_edge<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> h<span class="token punctuation">;</span>    <span class="token keyword">wire</span> p<span class="token punctuation">;</span>    BTN_CLEAN <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn_clean</span><span class="token punctuation">(</span>x_clean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BTN_CLEAN <span class="token function">clean2</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn</span><span class="token punctuation">(</span>x_clean<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn_clean</span><span class="token punctuation">(</span>x_clean2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BTN_EDGE <span class="token function">edg</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn</span><span class="token punctuation">(</span>x_clean2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn_edge</span><span class="token punctuation">(</span>x_edge<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ENCODER16 <span class="token function">encode</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span>x_edge<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">h</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">p</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">wire</span> chk_clean<span class="token punctuation">,</span> del_clean<span class="token punctuation">,</span> data_clean<span class="token punctuation">,</span> addr_clean<span class="token punctuation">,</span> run_clean<span class="token punctuation">,</span> rst_clean<span class="token punctuation">;</span>    <span class="token keyword">wire</span> chk_p<span class="token punctuation">,</span> del_p<span class="token punctuation">,</span> data_p<span class="token punctuation">,</span> addr_p<span class="token punctuation">,</span> run_p<span class="token punctuation">,</span> rst_p<span class="token punctuation">;</span>    BTN_CLEAN #<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">clean_chk</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn</span><span class="token punctuation">(</span>chk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn_clean</span><span class="token punctuation">(</span>chk_clean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BTN_CLEAN #<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">clean_del</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn</span><span class="token punctuation">(</span>del<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn_clean</span><span class="token punctuation">(</span>del_clean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BTN_CLEAN #<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">clean_data</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn_clean</span><span class="token punctuation">(</span>data_clean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BTN_CLEAN #<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">clean_addr</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn_clean</span><span class="token punctuation">(</span>addr_clean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BTN_CLEAN #<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">clean_run</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn_clean</span><span class="token punctuation">(</span>run_clean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BTN_CLEAN #<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">clean_rst</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn</span><span class="token punctuation">(</span>rst<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn_clean</span><span class="token punctuation">(</span>rst_clean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BTN_EDGE1 <span class="token function">edge_chk</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn</span><span class="token punctuation">(</span>chk_clean<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn_edge</span><span class="token punctuation">(</span>chk_p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BTN_EDGE1 <span class="token function">edge_del</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn</span><span class="token punctuation">(</span>del_clean<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn_edge</span><span class="token punctuation">(</span>del_p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BTN_EDGE1 <span class="token function">edge_data</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn</span><span class="token punctuation">(</span>data_clean<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn_edge</span><span class="token punctuation">(</span>data_p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BTN_EDGE1 <span class="token function">edge_addr</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn</span><span class="token punctuation">(</span>addr_clean<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn_edge</span><span class="token punctuation">(</span>addr_p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BTN_EDGE1 <span class="token function">edge_run</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn</span><span class="token punctuation">(</span>run_clean<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn_edge</span><span class="token punctuation">(</span>run_p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    BTN_EDGE1 <span class="token function">edge_rst</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn</span><span class="token punctuation">(</span>rst_clean<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">btn_edge</span><span class="token punctuation">(</span>rst_p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> dpra<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> d<span class="token punctuation">;</span>    <span class="token keyword">reg</span> s<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> spo<span class="token punctuation">,</span> dpo<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> next_a<span class="token punctuation">,</span> now_a<span class="token punctuation">,</span> load_a<span class="token punctuation">;</span>    <span class="token keyword">wire</span> write_en<span class="token punctuation">;</span>    <span class="token keyword">reg</span> reload_en<span class="token punctuation">;</span>    MUX2 #<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> mux_data_p <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">sel1</span><span class="token punctuation">(</span>reload_en<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">sel0</span><span class="token punctuation">(</span>data_p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">s</span><span class="token punctuation">(</span>busy<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span>write_en<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dist_mem_gen_1 <span class="token function">dist_test</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">we</span><span class="token punctuation">(</span>write_en<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">spo</span><span class="token punctuation">(</span>spo<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">dpra</span><span class="token punctuation">(</span>dpra<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">dpo</span><span class="token punctuation">(</span>dpo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> mux_s_out<span class="token punctuation">;</span>    MUX2 #<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> mux_s <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">sel1</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">sel0</span><span class="token punctuation">(</span>spo<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">s</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span>mux_s_out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> now_data<span class="token punctuation">,</span> next_data<span class="token punctuation">;</span>        <span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> rst_p<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rst_p <span class="token operator">==</span> <span class="token number">1'b1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            a <span class="token operator">&lt;=</span> <span class="token number">8'b0</span><span class="token punctuation">;</span>            d <span class="token operator">&lt;=</span> <span class="token number">16'b0</span><span class="token punctuation">;</span>            s <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>busy <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>chk_p <span class="token operator">==</span> <span class="token number">1'b1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                a <span class="token operator">&lt;=</span> a <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>                s <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token number">1'b1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                d <span class="token operator">&lt;=</span> <span class="token operator">{</span>d<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> h<span class="token operator">}</span><span class="token punctuation">;</span>                s <span class="token operator">&lt;=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>del_p <span class="token operator">==</span> <span class="token number">1'b1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                d <span class="token operator">&lt;=</span> d<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                s <span class="token operator">&lt;=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>data_p <span class="token operator">==</span> <span class="token number">1'b1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                d <span class="token operator">&lt;=</span> <span class="token number">16'b0</span><span class="token punctuation">;</span>                a <span class="token operator">&lt;=</span> a <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>                s <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>addr_p <span class="token operator">==</span> <span class="token number">1'b1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                a <span class="token operator">&lt;=</span> d<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                d <span class="token operator">&lt;=</span> <span class="token number">16'b0</span><span class="token punctuation">;</span>                s <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current_state <span class="token operator">==</span> reload <span class="token operator">||</span> current_state <span class="token operator">==</span> finised<span class="token punctuation">)</span> <span class="token keyword">begin</span>                a <span class="token operator">&lt;=</span> now_a<span class="token punctuation">;</span>                d <span class="token operator">&lt;=</span> now_data<span class="token punctuation">;</span>                reload_en <span class="token operator">&lt;=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    SEG7 <span class="token function">seg_display</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">mux_s_out</span><span class="token punctuation">(</span>mux_s_out<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">an</span><span class="token punctuation">(</span>an<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>seg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> load_data<span class="token punctuation">,</span> load_data1<span class="token punctuation">;</span>    <span class="token keyword">reg</span> load_reg<span class="token punctuation">;</span>    <span class="token keyword">wire</span> load<span class="token punctuation">;</span>    <span class="token keyword">assign</span> load <span class="token operator">=</span> <span class="token punctuation">(</span>current_state <span class="token operator">==</span> loading<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>load_reg <span class="token operator">==</span> <span class="token number">1'b1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        REG_FILE #<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token function">regfile</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">ra0</span><span class="token punctuation">(</span>now_a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">ra1</span><span class="token punctuation">(</span>next_a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">rd0</span><span class="token punctuation">(</span>now_data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">rd1</span><span class="token punctuation">(</span>next_data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">wa</span><span class="token punctuation">(</span>load_a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">wd</span><span class="token punctuation">(</span>load_data1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">we</span><span class="token punctuation">(</span>load<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> current_state<span class="token punctuation">,</span> next_state<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> done_cnt<span class="token punctuation">;</span>    <span class="token keyword">parameter</span> waiting <span class="token operator">=</span> <span class="token number">3'b0</span><span class="token punctuation">,</span> loading <span class="token operator">=</span> <span class="token number">3'b1</span><span class="token punctuation">,</span> sorting <span class="token operator">=</span> <span class="token number">3'b10</span><span class="token punctuation">,</span> store1 <span class="token operator">=</span> <span class="token number">3'b11</span><span class="token punctuation">,</span> store2 <span class="token operator">=</span> <span class="token number">3'b100</span><span class="token punctuation">,</span> reload <span class="token operator">=</span> <span class="token number">3'b101</span><span class="token punctuation">,</span> finised <span class="token operator">=</span> <span class="token number">3'b110</span><span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> less_than<span class="token punctuation">;</span>    <span class="token important">always@</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span>current_state <span class="token operator">==</span> loading<span class="token punctuation">)</span>            load_data1 <span class="token operator">=</span> dpo<span class="token punctuation">;</span>        <span class="token keyword">else</span>            load_data1 <span class="token operator">=</span> load_data<span class="token punctuation">;</span>    <span class="token keyword">end</span>    ALU #<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token function">alu_sort</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>next_data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>now_data<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token number">3'b000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>less_than<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">posedge</span> rst_p<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rst_p<span class="token punctuation">)</span> <span class="token keyword">begin</span>            current_state <span class="token operator">&lt;=</span> waiting<span class="token punctuation">;</span>            cnt <span class="token operator">&lt;=</span> <span class="token number">16'b0</span><span class="token punctuation">;</span>            busy <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>            next_a <span class="token operator">&lt;=</span> <span class="token number">8'b0</span><span class="token punctuation">;</span>            now_a <span class="token operator">&lt;=</span> <span class="token number">8'b0</span><span class="token punctuation">;</span>            done_cnt <span class="token operator">&lt;=</span> <span class="token number">8'b0</span><span class="token punctuation">;</span>            dpra <span class="token operator">&lt;=</span> <span class="token number">8'b0</span><span class="token punctuation">;</span>            load_a <span class="token operator">&lt;=</span> <span class="token number">8'b0</span><span class="token punctuation">;</span>            load_reg <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token keyword">begin</span>            current_state <span class="token operator">&lt;=</span> next_state<span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token punctuation">(</span>current_state<span class="token punctuation">)</span>                 waiting<span class="token punctuation">:</span> <span class="token keyword">begin</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>run_p<span class="token punctuation">)</span>                        busy <span class="token operator">&lt;=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                loading<span class="token punctuation">:</span> <span class="token keyword">begin</span>                    load_a <span class="token operator">&lt;=</span> load_a <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>                    dpra <span class="token operator">&lt;=</span> dpra <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>                    load_data <span class="token operator">&lt;=</span> dpo<span class="token punctuation">;</span>                <span class="token keyword">end</span>                sorting<span class="token punctuation">:</span> <span class="token keyword">begin</span>                    load_reg <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>less_than<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1'b1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                        next_a <span class="token operator">&lt;=</span> next_a <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>                        now_a <span class="token operator">&lt;=</span> next_a<span class="token punctuation">;</span>                        done_cnt <span class="token operator">&lt;=</span> done_cnt <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>                    <span class="token keyword">end</span>                    <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>now_a <span class="token operator">==</span> <span class="token number">8'hFF</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                        next_a <span class="token operator">&lt;=</span> next_a <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>                        now_a <span class="token operator">&lt;=</span> next_a<span class="token punctuation">;</span>                        done_cnt <span class="token operator">&lt;=</span> <span class="token number">8'b0</span><span class="token punctuation">;</span>                    <span class="token keyword">end</span>                    <span class="token keyword">else</span>                        done_cnt <span class="token operator">&lt;=</span> <span class="token number">8'b0</span><span class="token punctuation">;</span>                    cnt <span class="token operator">&lt;=</span> cnt <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                store1<span class="token punctuation">:</span> <span class="token keyword">begin</span>                    load_reg <span class="token operator">&lt;=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>                    load_a <span class="token operator">&lt;=</span> now_a<span class="token punctuation">;</span>                    load_data <span class="token operator">&lt;=</span> next_data<span class="token punctuation">;</span>                    cnt <span class="token operator">&lt;=</span> cnt <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                store2<span class="token punctuation">:</span> <span class="token keyword">begin</span>                    load_reg <span class="token operator">&lt;=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>                    load_a <span class="token operator">&lt;=</span> next_a<span class="token punctuation">;</span>                    load_data <span class="token operator">&lt;=</span> now_data<span class="token punctuation">;</span>                    cnt <span class="token operator">&lt;=</span> cnt <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                reload<span class="token punctuation">:</span> <span class="token keyword">begin</span>                    now_a <span class="token operator">&lt;=</span> now_a <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                finised<span class="token punctuation">:</span> <span class="token keyword">begin</span>                    busy <span class="token operator">&lt;=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">endcase</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span>    <span class="token important">always@</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">case</span><span class="token punctuation">(</span>current_state<span class="token punctuation">)</span>            waiting<span class="token punctuation">:</span> <span class="token keyword">begin</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>run_p<span class="token punctuation">)</span>                    next_state <span class="token operator">=</span> loading<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    next_state <span class="token operator">=</span> waiting<span class="token punctuation">;</span>            <span class="token keyword">end</span>            loading<span class="token punctuation">:</span> <span class="token keyword">begin</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>load_a <span class="token operator">==</span> <span class="token number">8'hFF</span><span class="token punctuation">)</span>                    next_state <span class="token operator">=</span> sorting<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    next_state <span class="token operator">=</span> loading<span class="token punctuation">;</span>            <span class="token keyword">end</span>            sorting<span class="token punctuation">:</span> <span class="token keyword">begin</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>less_than<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1'b1</span><span class="token punctuation">)</span>                    <span class="token function">if</span><span class="token punctuation">(</span>now_a <span class="token operator">!=</span> <span class="token number">8'hFF</span><span class="token punctuation">)</span>                        next_state <span class="token operator">=</span> store1<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>done_cnt <span class="token operator">==</span> <span class="token number">8'hFF</span><span class="token punctuation">)</span><span class="token comment">//此轮排序完成</span>                        next_state <span class="token operator">=</span> reload<span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        next_state <span class="token operator">=</span> sorting<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    next_state <span class="token operator">=</span> sorting<span class="token punctuation">;</span>            <span class="token keyword">end</span>            store1<span class="token punctuation">:</span> <span class="token keyword">begin</span>                next_state <span class="token operator">=</span> store2<span class="token punctuation">;</span>            <span class="token keyword">end</span>            store2<span class="token punctuation">:</span> <span class="token keyword">begin</span>                next_state <span class="token operator">=</span> sorting<span class="token punctuation">;</span>            <span class="token keyword">end</span>            reload<span class="token punctuation">:</span> <span class="token keyword">begin</span>                <span class="token function">if</span><span class="token punctuation">(</span>now_a <span class="token operator">==</span> <span class="token number">8'hFF</span><span class="token punctuation">)</span>                    next_state <span class="token operator">=</span> finised<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    next_state <span class="token operator">=</span> reload<span class="token punctuation">;</span>            <span class="token keyword">end</span>            finised<span class="token punctuation">:</span> <span class="token keyword">begin</span>                next_state <span class="token operator">=</span> waiting<span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token keyword">default</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                next_state <span class="token operator">=</span> waiting<span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span>    <span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-仿真结果和下载测试"><a href="#3-3-仿真结果和下载测试" class="headerlink" title="3.3 仿真结果和下载测试"></a>3.3 仿真结果和下载测试</h3><h4 id="3-3-1-仿真结果"><a href="#3-3-1-仿真结果" class="headerlink" title="3.3.1 仿真结果"></a>3.3.1 仿真结果</h4><p>由于数据输入需要进行多步，在仿真实现中比较麻烦，所以在本仿真中，只在地址2中写入数据 <code>oxb</code> ，即只对一个数字进行排序，便于方便检查结果：</p><p>在数据输入完成之后，首先进入 <code>loading</code> 状态：</p><p><img src="/2022/07/04/codh-lab2/sim_loading.png"></p><p>接着在 <code>sorting</code> 状态中，发现数据不是有序的时候，会进入到 <code>store</code> 状态：</p><p><img src="/2022/07/04/codh-lab2/sim_store.png"></p><p>在排序完成之后，会进入到 <code>reload</code> 状态，<strong>同时从该过程中（<code>next_data</code> 和 <code>next_a</code>)，可以看出排序的正确性</strong>：</p><p><img src="/2022/07/04/codh-lab2/sim_reload.png"></p><p>最后 <code>reload</code> 结束，进入到 <code>finished</code> 状态，完成排序，<code>busy = 0</code>， 并且返回到 <code>waiting</code> 状态：</p><p><img src="/2022/07/04/codh-lab2/sim_finished.png"></p><h4 id="3-3-2-下载测试"><a href="#3-3-2-下载测试" class="headerlink" title="3.3.2 下载测试"></a>3.3.2 下载测试</h4><p>约束文件如下：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog">set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN E3 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> clk <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>create_clock <span class="token operator">-</span>add <span class="token operator">-</span>name sys_clk_pin <span class="token operator">-</span>period <span class="token number">10.00</span> <span class="token operator">-</span>waveform <span class="token operator">{</span><span class="token number">0</span> <span class="token number">5</span><span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> clk <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN N17 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> data <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN P17 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> del <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN M18 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> addr <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN M17 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> chk <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN P18 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> run <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN C12 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> rst <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN N15 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> busy <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN V10 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> x<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN U11 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> x<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN U12 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> x<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN H6 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> x<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN T13 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> x<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN R16 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> x<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN U8 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> x<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN T8 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> x<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN R13 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> x<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN U18 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> x<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN T18 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> x<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN R17 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> x<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN R15 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> x<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN M13 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> x<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN L16 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN J15 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN V11 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> cnt<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN V12 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> cnt<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN V14 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> cnt<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN V15 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> cnt<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN T16 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> cnt<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN U14 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> cnt<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN T15 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> cnt<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN V16 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> cnt<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN U16 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> cnt<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN U17 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> cnt<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN V17 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> cnt<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN R18 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> cnt<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN N14 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> cnt<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN J13 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> cnt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN K15 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> cnt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN H17 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> cnt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN U13 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> an<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN K2 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> an<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN T14 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> an<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN P14 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> an<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN J14 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> an<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN T9 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> an<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN J18 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> an<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN J17 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> an<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN T10 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> seg<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN R10 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> seg<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN K16 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> seg<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN K13 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> seg<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN P15 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> seg<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN T11 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> seg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN L18 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> seg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来将展示数据输入按钮的功能：</p><p>首先先在地址1的位置上拨动开关7：</p><p><img src="/2022/07/04/codh-lab2/x7.png"></p><p>接着在地址1的位置上拨动开关6：</p><p><img src="/2022/07/04/codh-lab2/x6.png"></p><p>然后按下 <code>del</code> 按钮，可以发现数据6被删除：</p><p><img src="/2022/07/04/codh-lab2/del.png"></p><p>然后按下 <code>data</code> 按钮，这时候可以保存数据 <code>0xh7</code> 到地址1上，同时显示下一个地址的数据：</p><p><img src="/2022/07/04/codh-lab2/data.png"></p><p>然后拨动开关1，按下 <code>addr</code> 按钮，可以查看地址1的内容，发现数据 <code>0xh7</code> 已经保存到地址1上了：</p><p><img src="/2022/07/04/codh-lab2/addr.png"></p><p>同时为了方便测试排序正确性，我将分布式 RAM 的初始文件进行了小小修改：</p><p><img src="/2022/07/04/codh-lab2/init.png"></p><p>这样可以直接进行一个较大规模的排序，效果如下：</p><p><img src="/2022/07/04/codh-lab2/sort_init1.png"></p><p><img src="/2022/07/04/codh-lab2/sort_init2.png"></p><p><img src="/2022/07/04/codh-lab2/sort_init3.png"></p><p>按下 <code>run</code> 按键后：</p><p><img src="/2022/07/04/codh-lab2/sort_done1.png"></p><p><img src="/2022/07/04/codh-lab2/sort_done2.png"></p><p><img src="/2022/07/04/codh-lab2/sort_done3.png"></p><h3 id="3-4-电路资源和时间性能"><a href="#3-4-电路资源和时间性能" class="headerlink" title="3.4 电路资源和时间性能"></a>3.4 电路资源和时间性能</h3><h4 id="3-4-1-RTL电路"><a href="#3-4-1-RTL电路" class="headerlink" title="3.4.1 RTL电路"></a>3.4.1 RTL电路</h4><p><img src="/2022/07/04/codh-lab2/RTL1.png"></p><p><img src="/2022/07/04/codh-lab2/RTL2.png"></p><h4 id="3-4-2-综合电路"><a href="#3-4-2-综合电路" class="headerlink" title="3.4.2 综合电路"></a>3.4.2 综合电路</h4><p><img src="/2022/07/04/codh-lab2/sort_schematic.png"></p><h4 id="3-4-3-电路资源"><a href="#3-4-3-电路资源" class="headerlink" title="3.4.3 电路资源"></a>3.4.3 电路资源</h4><p><img src="/2022/07/04/codh-lab2/sort_utilization.png"></p><h4 id="3-4-4-时间性能"><a href="#3-4-4-时间性能" class="headerlink" title="3.4.4 时间性能"></a>3.4.4 时间性能</h4><p><img src="/2022/07/04/codh-lab2/sort_timing.png"></p><p><img src="/2022/07/04/codh-lab2/sort_timing1.png"></p><h2 id="4-实验总结"><a href="#4-实验总结" class="headerlink" title="4. 实验总结"></a>4. 实验总结</h2><ol><li>本次实验中进行了 SORT 模块的编写，对寄存器堆和 IP 核进行了应用。同时温故了 <code>for</code> 的使用方法，以及时分复用的设计思路来显示数码管。同时本次实验采取了三段式的设计方式，进一步加强了设计逻辑，最后实现了功能较为齐全，工程量较大的排序应用程序，并且能够在开发板上运行使用。</li><li>建议：本次实验难度太大，做起来十分痛苦十分耗时。希望可以完善PPT，在 PPT 中给出更详细的教程来指引怎么做、需要注意什么。而不是让同学们在这一门实验上耗费几天时间，严重影响其他课程的学习。</li></ol>]]></content>
      
      
      <categories>
          
          <category> CODH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> verilog sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>codH lab1</title>
      <link href="/2022/03/29/codh-lab1/"/>
      <url>/2022/03/29/codh-lab1/</url>
      
        <content type="html"><![CDATA[<h1 id="Lab1-实验报告"><a href="#Lab1-实验报告" class="headerlink" title="Lab1 实验报告"></a>Lab1 实验报告</h1><p>[TOC]</p><h2 id="1-ALU模块的逻辑设计和仿真"><a href="#1-ALU模块的逻辑设计和仿真" class="headerlink" title="1. ALU模块的逻辑设计和仿真"></a>1. ALU模块的逻辑设计和仿真</h2><h3 id="1-1-逻辑设计"><a href="#1-1-逻辑设计" class="headerlink" title="1.1 逻辑设计"></a>1.1 逻辑设计</h3><p>由 ALU 的<strong>状态转化图</strong>（是否叫这个）</p><center class="half">    <img src="..\images\codH-lab1\alu_fun.png" width="250">    <img src="..\images\codH-lab1\f_type.png" width="300"></center><p>设计时使用参数 <code>parameter WIDTH = 32</code>， 可以方便例化不同位宽数据，提高 ALU 模块的使用率。通过组合逻辑，使用 <code>case(s)</code> 进行功能选择，对应到不同的运算，实现 ALU 的功能。</p><p>对于运算结果 y 的计算，直接使用 verilog 中的运算符进行赋值即可，即采取此类方法： <code>y = a (opcode) b</code>。</p><p>对于标志 f 的设置，可以采用枚举的方法，直接对其完成设置：</p><p>当数据宽度 <code>WIDTH == 1</code> 时（虽然感觉这种情况比较少），则 a 和 b 对应有4种情况：</p><ol><li>a == 0，b == 0        此时 a 和 b 相等，f 设置为 3’b001</li><li>a == 0，b == 1        此时情况为 无符号小于，有符号大于，f 设置为 3’b100</li><li>a == 1，b == 0        此时情况为 无符号大于，有符号小于，f 设置为 3’b010</li><li>a == 1，b == 1        此时 a 和 b 相等，f 设置为 3’b001</li></ol><p>当数据宽度 <code>WIDTH != 1</code> 时，则先对 a 和 b 的符号位进行比较，然后对后面 <code>a[WIDTH-2:0]</code> 和 <code>b[WIDTH-2:0]</code> 进行比较：</p><ol><li><code>a[WIDTH-1] == 0</code>，<code> b[WIDTH-1] == 0</code><ul><li><code>a[WIDTH-2:0] == b[WIDTH-2:0]</code>          此时 a 和 b 相等，f 设置为 3’b001</li><li><code>a[WIDTH-2:0] &gt; b[WIDTH-2:0]</code>            此时情况为 无符号大于，有符号大于，f 设置为 3’b000</li><li><code>a[WIDTH-2:0] &lt; b[WIDTH-2:0]</code>            此时情况为 无符号小于，有符号小于，f 设置为 3’b110</li></ul></li><li><code>a[WIDTH-1] == 0</code>，<code> b[WIDTH-1] == 1</code>        此时情况为 无符号小于，有符号大于，f 设置为 3’b100</li><li><code>a[WIDTH-1] == 1</code>，<code> b[WIDTH-1] == 0</code>        此时情况为 无符号大于，有符号小于，f 设置为 3’b010</li><li><code>a[WIDTH-1] == 1</code>，<code> b[WIDTH-1] == 1</code><ul><li><code>a[WIDTH-2:0] == b[WIDTH-2:0]</code>          此时 a 和 b 相等，f 设置为 3’b001</li><li><code>a[WIDTH-2:0] &gt; b[WIDTH-2:0]</code>            此时情况为 无符号大于，有符号小于，f 设置为 3’b010</li><li><code>a[WIDTH-2:0] &lt; b[WIDTH-2:0]</code>            此时情况为 无符号小于，有符号大于，f 设置为 3’b100</li></ul></li></ol><p>上述便是 f 标志在不同数据情况下的设置。</p><h3 id="1-2-核心代码"><a href="#1-2-核心代码" class="headerlink" title="1.2 核心代码"></a>1.2 核心代码</h3><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> ALU #<span class="token punctuation">(</span><span class="token keyword">parameter</span> WIDTH <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> s<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> y<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> f    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> alu_y<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> alu_f<span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>     <span class="token keyword">begin</span>        alu_f <span class="token operator">=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span>        <span class="token function">case</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token number">3'b000</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                alu_y <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>WIDTH <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;</span> b<span class="token punctuation">)</span>                        alu_f <span class="token operator">=</span> <span class="token number">3'b010</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span>                        alu_f <span class="token operator">=</span> <span class="token number">3'b001</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        alu_f <span class="token operator">=</span> <span class="token number">3'b100</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                <span class="token keyword">else</span> <span class="token keyword">begin</span>                    <span class="token function">case</span><span class="token punctuation">(</span><span class="token operator">{</span>a<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">}</span><span class="token punctuation">)</span>                        <span class="token number">2'b00</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                                alu_f <span class="token operator">=</span> <span class="token number">3'b110</span><span class="token punctuation">;</span>                            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                                alu_f <span class="token operator">=</span> <span class="token number">3'b001</span><span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                alu_f <span class="token operator">=</span> <span class="token number">3'b000</span><span class="token punctuation">;</span>                        <span class="token keyword">end</span>                        <span class="token number">2'b01</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                            alu_f <span class="token operator">=</span> <span class="token number">3'b100</span><span class="token punctuation">;</span>                        <span class="token keyword">end</span>                        <span class="token number">2'b10</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                            alu_f <span class="token operator">=</span> <span class="token number">3'b010</span><span class="token punctuation">;</span>                        <span class="token keyword">end</span>                        <span class="token number">2'b11</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                            <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                                alu_f <span class="token operator">=</span> <span class="token number">3'b100</span><span class="token punctuation">;</span>                            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                                alu_f <span class="token operator">=</span> <span class="token number">3'b001</span><span class="token punctuation">;</span>                            <span class="token keyword">else</span>                                alu_f <span class="token operator">=</span> <span class="token number">3'b010</span><span class="token punctuation">;</span>                        <span class="token keyword">end</span>                    <span class="token keyword">endcase</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            <span class="token number">3'b001</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                alu_y <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">3'b010</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                alu_y <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">3'b011</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                alu_y <span class="token operator">=</span> a <span class="token operator">|</span> b<span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">3'b100</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                alu_y <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">3'b101</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                alu_y <span class="token operator">=</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">3'b110</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                alu_y <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token number">3'b111</span><span class="token punctuation">:</span> <span class="token keyword">begin</span>                alu_y <span class="token operator">=</span> a <span class="token operator">&gt;&gt;&gt;</span> b<span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">endcase</span>    <span class="token keyword">end</span>    <span class="token keyword">assign</span> y <span class="token operator">=</span> alu_y<span class="token punctuation">;</span>    <span class="token keyword">assign</span> f <span class="token operator">=</span> alu_f<span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-仿真结果"><a href="#1-3-仿真结果" class="headerlink" title="1.3 仿真结果"></a>1.3 仿真结果</h3><p>对 ALU 进行4组数据测，前两组是位宽为3的数据，后两组是位宽为8的数据：</p><center class="half">    <img src="..\images\codH-lab1\alu_sim1.png" width="275">    <img src="..\images\codH-lab1\alu_sim2.png" width="275"></center><center class="half">    <img src="..\images\codH-lab1\alu_sim3.png" width="275">    <img src="..\images\codH-lab1\alu_sim4.png" width="275"></center><h2 id="2-6位ALU的下载测试"><a href="#2-6位ALU的下载测试" class="headerlink" title="2. 6位ALU的下载测试"></a>2. 6位ALU的下载测试</h2><h3 id="2-1-逻辑设计"><a href="#2-1-逻辑设计" class="headerlink" title="2.1 逻辑设计"></a>2.1 逻辑设计</h3><p>根据 PPT 给出的数据通路，可以分析出我们需要使用5个复位使能的 D 触发器和由前面设计的 ALU 模块：</p> <center class="half">    <img src="..\images\codH-lab1\alu_datapath.png" width="500"></center><p>则我们需要设计一个复位使能的 D 触发器，再将其例化组合就可以得到6位 ALU 的模块。</p><p>鉴于这一部分比较简单，就不再赘述相关设计。</p><h3 id="2-2-核心代码"><a href="#2-2-核心代码" class="headerlink" title="2.2 核心代码"></a>2.2 核心代码</h3><h4 id="2-2-1-DFF"><a href="#2-2-1-DFF" class="headerlink" title="2.2.1 DFF"></a>2.2.1 DFF</h4><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> DFF #<span class="token punctuation">(</span><span class="token keyword">parameter</span> WIDTH <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">,</span> RST_VALUE <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span> rstn<span class="token punctuation">,</span> en<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> d<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span>WIDTH<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> q    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rstn<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">!</span>rstn<span class="token punctuation">)</span>            q <span class="token operator">&lt;=</span> RST_VALUE<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>en<span class="token punctuation">)</span>            q <span class="token operator">&lt;=</span> d<span class="token punctuation">;</span>        <span class="token keyword">else</span>            q <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span>  <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-6ALU"><a href="#2-2-2-6ALU" class="headerlink" title="2.2.2 6ALU"></a>2.2.2 6ALU</h4><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">ALU_test</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span>    <span class="token keyword">input</span> clk100mhz<span class="token punctuation">,</span> rstn<span class="token punctuation">,</span> en<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> s<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> y<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> f    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> wire_s<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> wire_a<span class="token punctuation">,</span> wire_b<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> wire_y<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> wire_f<span class="token punctuation">;</span>    DFF #<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> DFF_s <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk100mhz<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">rstn</span><span class="token punctuation">(</span>rstn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">en</span><span class="token punctuation">(</span>en<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">q</span><span class="token punctuation">(</span>wire_s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DFF #<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> DFF_a <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk100mhz<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">rstn</span><span class="token punctuation">(</span>rstn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">en</span><span class="token punctuation">(</span>en<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">q</span><span class="token punctuation">(</span>wire_a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DFF #<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> DFF_b <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk100mhz<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">rstn</span><span class="token punctuation">(</span>rstn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">en</span><span class="token punctuation">(</span>en<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">q</span><span class="token punctuation">(</span>wire_b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ALU #<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> ALU_test <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>wire_a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>wire_b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">s</span><span class="token punctuation">(</span>wire_s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span>wire_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>wire_f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DFF #<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> DFF_y <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk100mhz<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">rstn</span><span class="token punctuation">(</span>rstn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">en</span><span class="token punctuation">(</span><span class="token number">1'b1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>wire_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">q</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DFF #<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> DFF_f <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk100mhz<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">rstn</span><span class="token punctuation">(</span>rstn<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">en</span><span class="token punctuation">(</span><span class="token number">1'b1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>wire_f<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">q</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-仿真结果和下载测试"><a href="#2-3-仿真结果和下载测试" class="headerlink" title="2.3 仿真结果和下载测试"></a>2.3 仿真结果和下载测试</h3><h4 id="2-3-1-仿真结果"><a href="#2-3-1-仿真结果" class="headerlink" title="2.3.1 仿真结果"></a>2.3.1 仿真结果</h4><p>对6位 ALU 赋两组数据：</p><center class="half">    <img src="..\images\codH-lab1\6alu_sim1.png" width="275">    <img src="..\images\codH-lab1\6alu_sim2.png" width="275"></center><h4 id="2-3-2-下载测试"><a href="#2-3-2-下载测试" class="headerlink" title="2.3.2 下载测试"></a>2.3.2 下载测试</h4><p>编写约束文件如下，将数据链接到对应管脚（如6位 ALU 的数据通路图）：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog">set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN E3 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> clk100mhz <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>create_clock <span class="token operator">-</span>add <span class="token operator">-</span>name sys_clk_pin <span class="token operator">-</span>period <span class="token number">10.00</span> <span class="token operator">-</span>waveform <span class="token operator">{</span><span class="token number">0</span> <span class="token number">5</span><span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> clk100mhz <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN N17 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> en <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN C12 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> rstn <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN V10 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN U11 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN U12 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN T13 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN R16 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN U8 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN T8 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN R13 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN U18 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN T18 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> b<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN R17 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> b<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN R15 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN M13 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN L16 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN J15 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN V17 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN R18 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN N14 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN J13 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN K15 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN H17 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN V11 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> f<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN V12 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN V14 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有符号小于示例：</p><img src="..\images\codH-lab1\6alu_1.png" width="400"><p>无符号小于示例：</p><img src="..\images\codH-lab1\6alu_2.png" width="400"><p>加法：</p><img src="..\images\codH-lab1\6alu_3.png" width="400"><p>与运算：</p><img src="..\images\codH-lab1\6alu_4.png" width="400"><p>或运算：</p><img src="..\images\codH-lab1\6alu_5.png" width="400"><p>异或运算：</p><img src="..\images\codH-lab1\6alu_6.png" width="400"><p>左移：</p><img src="..\images\codH-lab1\6alu_7.png" width="400"><p>右移：</p><img src="..\images\codH-lab1\6alu_8.png" width="400"><h3 id="2-4-电路资源和时间性能"><a href="#2-4-电路资源和时间性能" class="headerlink" title="2.4 电路资源和时间性能"></a>2.4 电路资源和时间性能</h3><h4 id="2-4-1-RTL电路图"><a href="#2-4-1-RTL电路图" class="headerlink" title="2.4.1 RTL电路图"></a>2.4.1 RTL电路图</h4><img src="..\images\codH-lab1\RTL_schematic.png" width="600"><p>可以看出，这个 RTL 电路图和 PPT 中所给出的电路图几乎是吻合的，其结构形式是一致的。</p><h4 id="2-4-2-综合电路"><a href="#2-4-2-综合电路" class="headerlink" title="2.4.2 综合电路"></a>2.4.2 综合电路</h4><img src="..\images\codH-lab1\schematic.png" width="600"><h4 id="2-4-3-电路资源"><a href="#2-4-3-电路资源" class="headerlink" title="2.4.3 电路资源"></a>2.4.3 电路资源</h4><img src="..\images\codH-lab1\utilization.png" width="800"><h4 id="2-4-4-电路性能"><a href="#2-4-4-电路性能" class="headerlink" title="2.4.4 电路性能"></a>2.4.4 电路性能</h4><img src="..\images\codH-lab1\Timings.png" width="800"><p>可以看出，Slack 还剩余 6.219秒，电路性能良好。</p><h2 id="3-FLS的逻辑设计、仿真和下载测试"><a href="#3-FLS的逻辑设计、仿真和下载测试" class="headerlink" title="3. FLS的逻辑设计、仿真和下载测试"></a>3. FLS的逻辑设计、仿真和下载测试</h2><h3 id="3-1-逻辑设计"><a href="#3-1-逻辑设计" class="headerlink" title="3.1 逻辑设计"></a>3.1 逻辑设计</h3><h4 id="3-1-1-数据通路"><a href="#3-1-1-数据通路" class="headerlink" title="3.1.1 数据通路"></a>3.1.1 数据通路</h4><p>从所需的实现功能考虑，首先要能够存储前两次的输入数据（即初始数据），所以我们采用两个寄存器分别为 reg_a 和 reg_b 。然后再接下来的操作中，每次按下使能键时，都可以产生一个新的斐波那契数并且显示出来。所以需要使用 D 触发器来进行 “保留” 数据。为了能够在正确次序中显示正确的斐波那契数，还应该为输出结果加上数据选择器进行选择。同理，再后续的操作中，与输入 d 数据无关，所以对于 reg_a 和 reg_b ，也需要使用数据选择器进行选择：在初始阶段时，选择输入 d ，而在后续阶段时，把数据进行 “移位” 操作，只需要保存计算下一个斐波那契数的两个数据即可。为了能够对其进行选择，我们还使用了一个计数器 reg_cnt 进行计数，以完成对数据的选择和分配。</p><p>经过多次尝试设计，最终设计出来的数据通路图如下（省略了一些不是很重要的部分，例如 clk，rstn 等等）：</p><img src="..\images\codH-lab1\fls_datapath.png" width="700"><h4 id="3-1-2-状态转化"><a href="#3-1-2-状态转化" class="headerlink" title="3.1.2 状态转化"></a>3.1.2 状态转化</h4><p>初始状态时， <code>reg_cnt = 2'b00</code>，此时我需要在 en 按钮按下时（此时 <code>reg_cnt = 2'b01</code>），将 d 数据存储到 reg_a 中，那么下一次 en 按钮按下之前，应该把 d 数据分配到 mux_b 中，再按下 en 按钮时 （此时 <code>reg_cnt = 2'b10</code>），将 d 数据存储到 reg_b 中，而再后续的操作中，都与 d 不再有任何关系了，所以可以保持计数器不变。同时可以看出，将 ALU 的计算结果存储到了 reg_b 当中，那么输出 y 只需要在 reg_a 和 reg_b 当中选择即可。</p><p>由上述分析，可以得知 reg_cnt 的变化就是一个状态转化的过程。用状态图总结上述就是：</p><img src="..\images\codH-lab1\fls_state.png" width="700"><p><strong>当然，当 rstn 有效时，一切全部归0。</strong></p><h4 id="3-1-3-去除毛刺"><a href="#3-1-3-去除毛刺" class="headerlink" title="3.1.3 去除毛刺"></a>3.1.3 去除毛刺</h4><p>由于使能信号以及复位信号都是由按钮进行的，所以难免会出现毛刺，所以我们需要对输入的信号进行去除毛刺处理。采用上学期数电实验的方法：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">jitter_clr</span><span class="token punctuation">(</span><span class="token keyword">input</span> clk<span class="token punctuation">,</span><span class="token keyword">input</span> button<span class="token punctuation">,</span><span class="token keyword">output</span> button_clean<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> cnt<span class="token punctuation">;</span><span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span><span class="token keyword">begin</span>            <span class="token function">if</span><span class="token punctuation">(</span>button <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span>cnt <span class="token operator">&lt;=</span> <span class="token number">4'h0</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>cnt <span class="token operator">&lt;</span> <span class="token number">4'h8</span><span class="token punctuation">)</span>cnt <span class="token operator">&lt;=</span> cnt <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">assign</span> button_clean <span class="token operator">=</span> cnt<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>由于我们这里所用的复位信号是低电平有效，而按钮按下是会产生高电平的，所以我们对复位信号做了一些不同的处理，详情在核心代码 [3.2.3 FLS](#3.2.3 FLS) 中。</strong></p><h4 id="3-1-4-取边缘信号"><a href="#3-1-4-取边缘信号" class="headerlink" title="3.1.4 取边缘信号"></a>3.1.4 取边缘信号</h4><p>尽管我们按下按钮只持续 ”一瞬间“ ，但是这也会持续多个周期，为了让其只发挥一次作用，我们需要对其取边缘信号，使信号只维持一个周期，避免出现按下一次按钮却完成了多次操作的情况。采用上学期数电实验的方法：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">signal_edge</span><span class="token punctuation">(</span><span class="token keyword">input</span> clk<span class="token punctuation">,</span><span class="token keyword">input</span> button<span class="token punctuation">,</span><span class="token keyword">output</span> button_edge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">reg</span> button_r1<span class="token punctuation">,</span>button_r2<span class="token punctuation">;</span><span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span>button_r1 <span class="token operator">&lt;=</span> button<span class="token punctuation">;</span><span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span>button_r2 <span class="token operator">&lt;=</span> button_r1<span class="token punctuation">;</span><span class="token keyword">assign</span> button_edge <span class="token operator">=</span> button_r1 <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>button_r2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>由于我们这里所用的复位信号是低电平有效，而按钮按下是会产生高电平的，所以我们对复位信号做了一些不同的处理，详情在核心代码 [3.2.3 FLS](#3.2.3 FLS) 中。</strong></p><h3 id="3-2-核心代码"><a href="#3-2-核心代码" class="headerlink" title="3.2 核心代码"></a>3.2 核心代码</h3><h4 id="3-2-1-DMUX"><a href="#3-2-1-DMUX" class="headerlink" title="3.2.1 DMUX"></a>3.2.1 DMUX</h4><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> DMUX2 #<span class="token punctuation">(</span><span class="token keyword">parameter</span> MSB <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">,</span> LSB <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span>MSB<span class="token punctuation">:</span> LSB<span class="token punctuation">]</span> d<span class="token punctuation">,</span>    <span class="token keyword">input</span> s<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span>MSB<span class="token punctuation">:</span> LSB<span class="token punctuation">]</span> sel1<span class="token punctuation">,</span> sel0    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always @</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>            sel0 <span class="token operator">=</span> d<span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token keyword">else</span> <span class="token keyword">begin</span>            sel1 <span class="token operator">=</span> d<span class="token punctuation">;</span>        <span class="token keyword">end</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-2-MUX"><a href="#3-2-2-MUX" class="headerlink" title="3.2.2 MUX"></a>3.2.2 MUX</h4><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> MUX2 #<span class="token punctuation">(</span><span class="token keyword">parameter</span> MSB <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">,</span> LSB <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span>MSB<span class="token punctuation">:</span> LSB<span class="token punctuation">]</span> sel1<span class="token punctuation">,</span> sel0<span class="token punctuation">,</span>    <span class="token keyword">input</span> s<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token punctuation">[</span>MSB<span class="token punctuation">:</span> LSB<span class="token punctuation">]</span> y    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> y <span class="token operator">=</span> s <span class="token operator">?</span> sel1 <span class="token punctuation">:</span> sel0<span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-3-FLS"><a href="#3-2-3-FLS" class="headerlink" title="3.2.3 FLS"></a>3.2.3 FLS</h4><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">FLS</span><span class="token punctuation">(</span>    <span class="token keyword">input</span> clk<span class="token punctuation">,</span> rstn<span class="token punctuation">,</span> en<span class="token punctuation">,</span>    <span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> d<span class="token punctuation">,</span>    <span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> y    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> dmux_a<span class="token punctuation">,</span> dmux_b<span class="token punctuation">,</span> mux_a<span class="token punctuation">,</span> mux_b<span class="token punctuation">,</span> dff_a<span class="token punctuation">,</span> dff_b<span class="token punctuation">,</span> mux_ab<span class="token punctuation">,</span> mux_y<span class="token punctuation">,</span> wire_y<span class="token punctuation">,</span> out_y<span class="token punctuation">;</span>    <span class="token keyword">wire</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> wire_f<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> reg_a<span class="token punctuation">,</span> reg_b<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> reg_cnt<span class="token punctuation">;</span>    <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> en_cnt<span class="token punctuation">,</span> rstn_cnt<span class="token punctuation">;</span>    <span class="token keyword">wire</span> en_clean<span class="token punctuation">,</span> rstn_clean<span class="token punctuation">;</span>    <span class="token keyword">reg</span> en_btn1<span class="token punctuation">,</span> en_btn2<span class="token punctuation">,</span> rstn_btn1<span class="token punctuation">,</span> rstn_btn2<span class="token punctuation">;</span>    <span class="token keyword">wire</span> en_edge<span class="token punctuation">,</span> rstn_edge<span class="token punctuation">;</span>    DMUX2 #<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">DMUX_d</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">s</span><span class="token punctuation">(</span>reg_cnt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">sel0</span><span class="token punctuation">(</span>dmux_a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">sel1</span><span class="token punctuation">(</span>dmux_b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MUX2 #<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">MUX_a</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">sel0</span><span class="token punctuation">(</span>dmux_a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">sel1</span><span class="token punctuation">(</span>reg_b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">s</span><span class="token punctuation">(</span>reg_cnt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span>mux_a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MUX2 #<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">MUX_b</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">sel0</span><span class="token punctuation">(</span>dmux_b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">sel1</span><span class="token punctuation">(</span>wire_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">s</span><span class="token punctuation">(</span>reg_cnt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span>mux_b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DFF #<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">DFF_a</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">rstn</span><span class="token punctuation">(</span>rstn_edge<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">en</span><span class="token punctuation">(</span>en_edge<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>mux_a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">q</span><span class="token punctuation">(</span>dff_a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DFF #<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">DFF_b</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">rstn</span><span class="token punctuation">(</span>rstn_edge<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">en</span><span class="token punctuation">(</span>en_edge<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>mux_b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">q</span><span class="token punctuation">(</span>dff_b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ALU #<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> ALU_test <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">a</span><span class="token punctuation">(</span>reg_a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span>reg_b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">s</span><span class="token punctuation">(</span><span class="token number">3'b001</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span>wire_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span>wire_f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MUX2 #<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">MUX_y</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">sel0</span><span class="token punctuation">(</span>reg_a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">sel1</span><span class="token punctuation">(</span>reg_b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">s</span><span class="token punctuation">(</span>reg_cnt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span>mux_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DFF #<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">DFF_y</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token function">clk</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">rstn</span><span class="token punctuation">(</span>rstn_edge<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">en</span><span class="token punctuation">(</span><span class="token number">1'b1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>mux_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token function">q</span><span class="token punctuation">(</span>out_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always@</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">begin</span>        y <span class="token operator">=</span> out_y<span class="token punctuation">;</span>        reg_a <span class="token operator">=</span> dff_a<span class="token punctuation">;</span>        reg_b <span class="token operator">=</span> dff_b<span class="token punctuation">;</span>    <span class="token keyword">end</span>        <span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>en <span class="token operator">==</span> <span class="token number">1'b0</span><span class="token punctuation">)</span>            en_cnt <span class="token operator">&lt;=</span> <span class="token number">4'h0</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>en_cnt <span class="token operator">&lt;</span> <span class="token number">4'h8</span><span class="token punctuation">)</span>            en_cnt <span class="token operator">&lt;=</span> en_cnt <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            en_cnt <span class="token operator">&lt;=</span> en_cnt<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">assign</span> en_clean <span class="token operator">=</span> en_cnt<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rstn <span class="token operator">==</span> <span class="token number">1'b1</span><span class="token punctuation">)</span>            rstn_cnt <span class="token operator">&lt;=</span> <span class="token number">4'h0</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rstn_cnt <span class="token operator">&lt;</span> <span class="token number">4'h8</span><span class="token punctuation">)</span>            rstn_cnt <span class="token operator">&lt;=</span> rstn_cnt <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            rstn_cnt <span class="token operator">&lt;=</span> rstn_cnt<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">assign</span> rstn_clean <span class="token operator">=</span> <span class="token operator">~</span>rstn_cnt<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span>        en_btn1 <span class="token operator">&lt;=</span> en_clean<span class="token punctuation">;</span>        en_btn2 <span class="token operator">&lt;=</span> en_btn1<span class="token punctuation">;</span>        rstn_btn1 <span class="token operator">&lt;=</span> rstn_clean<span class="token punctuation">;</span>        rstn_btn2 <span class="token operator">&lt;=</span> rstn_btn1<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token keyword">assign</span> en_edge <span class="token operator">=</span> en_btn1 <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">~</span>en_btn2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">assign</span> rstn_edge <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">~</span>rstn_btn1<span class="token punctuation">)</span> <span class="token operator">&amp;</span> rstn_btn2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> rstn_edge<span class="token punctuation">)</span> <span class="token keyword">begin</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>rstn_edge<span class="token punctuation">)</span>            reg_cnt <span class="token operator">=</span> <span class="token number">2'b00</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>reg_cnt <span class="token operator">==</span> <span class="token number">2'b10</span><span class="token punctuation">)</span>            reg_cnt <span class="token operator">=</span> reg_cnt<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>en_edge <span class="token operator">==</span> <span class="token number">1'b1</span><span class="token punctuation">)</span>            reg_cnt <span class="token operator">=</span> reg_cnt <span class="token operator">+</span> <span class="token number">1'b1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            reg_cnt <span class="token operator">=</span> reg_cnt<span class="token punctuation">;</span>    <span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-仿真结果和下载测试"><a href="#3-3-仿真结果和下载测试" class="headerlink" title="3.3 仿真结果和下载测试"></a>3.3 仿真结果和下载测试</h3><h4 id="3-3-1-仿真结果"><a href="#3-3-1-仿真结果" class="headerlink" title="3.3.1 仿真结果"></a>3.3.1 仿真结果</h4><p>选用两组数据 <code>16'b1, 16'b10</code> 和 <code>16'b1, 16'b11</code> 进行仿真，仿真结果如下：</p><img src="..\images\codH-lab1\fls_simulation.png" width="700"><img src="..\images\codH-lab1\fls_simulation2.png" width="700"><h4 id="3-3-2-下载测试"><a href="#3-3-2-下载测试" class="headerlink" title="3.3.2 下载测试"></a>3.3.2 下载测试</h4><p>编写约束文件如下，将数据链接到对应管脚</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog">set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN E3 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> clk <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>create_clock <span class="token operator">-</span>add <span class="token operator">-</span>name sys_clk_pin <span class="token operator">-</span>period <span class="token number">10.00</span> <span class="token operator">-</span>waveform <span class="token operator">{</span><span class="token number">0</span> <span class="token number">5</span><span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> clk <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN N17 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> en <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN C12 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> rstn <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN V10 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> d<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN U11 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> d<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN U12 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> d<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN H6 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> d<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN T13 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> d<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN R16 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> d<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN U8 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> d<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN T8 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> d<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN R13 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> d<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN U18 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> d<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN T18 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> d<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN R17 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> d<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN R15 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN M13 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> d<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN L16 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN J15 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN V11 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN V12 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN V14 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN V15 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN T16 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN U14 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN T15 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN V16 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN U16 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN U17 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN V17 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN R18 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN N14 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN J13 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN K15 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set_property <span class="token operator">-</span>dict <span class="token operator">{</span> PACKAGE_PIN H17 IOSTANDARD LVCMOS33 <span class="token operator">}</span> <span class="token punctuation">[</span>get_ports <span class="token operator">{</span> y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输入第一个数字1：</p><img src="..\images\codH-lab1\fls_1.png" width="400"><p>输入第二个数2：</p><img src="..\images\codH-lab1\fls_2.png" width="400"><p>开始计算斐波那契数：</p><img src="..\images\codH-lab1\fls_3.png" width="400"><img src="..\images\codH-lab1\fls_4.png" width="400"><img src="..\images\codH-lab1\fls_5.png" width="400"><h3 id="3-4-电路资源和时间性能"><a href="#3-4-电路资源和时间性能" class="headerlink" title="3.4 电路资源和时间性能"></a>3.4 电路资源和时间性能</h3><h4 id="3-4-1-RTL电路图"><a href="#3-4-1-RTL电路图" class="headerlink" title="3.4.1 RTL电路图"></a>3.4.1 RTL电路图</h4><img src="..\images\codH-lab1\fls_rtl1.png" width="600"><img src="..\images\codH-lab1\fls_rtl2.png" width="600"><img src="..\images\codH-lab1\fls_rtl3.png" width="600"><h4 id="3-4-2-综合电路"><a href="#3-4-2-综合电路" class="headerlink" title="3.4.2 综合电路"></a>3.4.2 综合电路</h4><img src="..\images\codH-lab1\fls_schematic.png" width="600"><h4 id="3-4-3-电路资源"><a href="#3-4-3-电路资源" class="headerlink" title="3.4.3 电路资源"></a>3.4.3 电路资源</h4><img src="..\images\codH-lab1\fls_utilization.png" width="600"><h4 id="3-4-4-电路性能"><a href="#3-4-4-电路性能" class="headerlink" title="3.4.4 电路性能"></a>3.4.4 电路性能</h4><img src="..\images\codH-lab1\fls_timing.png" width="600"><h2 id="4-实验总结"><a href="#4-实验总结" class="headerlink" title="4. 实验总结"></a>4. 实验总结</h2><ol><li><p>本次实验进行了 ALU 模块的编写，FLS 的应用，对 Verilog 设计语言起了一定的复习作用。同时温故了几种常见的信号处理技巧，例如信号整形去除毛刺、取信号上下边缘技巧。并且巩固了状态机的设计方法，最终能够将实现功能在开发板上体现出来，本次实验采用的就是摩尔型电路来对 FLS 进行设计。最后还学习了一些新的知识。包括数据通路和控制器的设计方法和了解查看电路性能和资源使用情况。在实现 FLS 过程中，需要自己凭借状态机来实现数据通路的设计。然后可以通过查看电路性能和资源使用情况，了解自己设计的电路图的优良性以及可行性。</p></li><li><p>建议：本次实验内容其实和数电实验内容并没有什么差别，希望可以提前几周开始实验，然后为后面实验多留点时间。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> codH </category>
          
      </categories>
      
      
        <tags>
            
            <tag> verilog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django搭建简易博客(5)</title>
      <link href="/2022/02/21/django-da-jian-jian-yi-bo-ke-5/"/>
      <url>/2022/02/21/django-da-jian-jian-yi-bo-ke-5/</url>
      
        <content type="html"><![CDATA[<h2 id="创建博客文章"><a href="#创建博客文章" class="headerlink" title="创建博客文章"></a>创建博客文章</h2><h3 id="添加表单"><a href="#添加表单" class="headerlink" title="添加表单"></a>添加表单</h3><p>让用户输入并提交信息的页面都是表单，在Django中，创建表单的最简单方式就是使用 ModelForm， 他根据我们定义的模型中的信息自动创建表单。</p><p>接下来在文件夹 blogs 中创建一个名为 <code>forms.py</code> 的文件：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django <span class="token keyword">import</span> forms<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> BlogPost<span class="token keyword">class</span> <span class="token class-name">BlogForm</span><span class="token punctuation">(</span>forms<span class="token punctuation">.</span>ModelForm<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> BlogPost        fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">]</span>        labels <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'title'</span><span class="token punctuation">:</span> <span class="token string">'Title'</span><span class="token punctuation">,</span> <span class="token string">'text'</span><span class="token punctuation">:</span> <span class="token string">'Text'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先导入模块 <code>forms</code> 以及要使用的模型 <code>BlogPost</code> ，定义一个名为 <code>BlogForm</code> 的表单，它继承了 <code>forms.ModelForm</code>。最简单的 <code>ModelForm</code> 只包含一个内嵌的 <code>Meta</code> 类，它告诉 Django 根据哪个模型创建表单以及在表单中包含哪些字段。</p><ul><li><code>Model</code> 根据模型 <code>BlogPost</code> 创建表单</li><li><code>fields</code> 只包含 <code>title</code> 和 <code>text</code> 字段</li><li><code>lables</code> 为字段生成标签</li></ul><h3 id="URL模式"><a href="#URL模式" class="headerlink" title="URL模式"></a>URL模式</h3><p>当用户要创建博客文章时，我们切换到 <a href="http://127.0.0.1:8000/new_blog/">http://127.0.0.1:8000/new_blog/</a> 。下面时页面 new_blog 的 URL 模式，将其添加到 <code>blogs/urls.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span> snip <span class="token operator">-</span><span class="token operator">-</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token operator">-</span><span class="token operator">-</span> snip <span class="token operator">-</span><span class="token operator">-</span>    path<span class="token punctuation">(</span><span class="token string">'new_blog/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>new_blog<span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'new_blog'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h3><p>函数 <code>new_blog()</code> 需要处理两种情形，一种时刚进入 <code>new_blog</code> 页面（在这种情况下应显示空表单）；二是对提交的表单进行处理，并将用户重定向到页面 blogs ：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token punctuation">,</span> redirect<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> BlogPost<span class="token keyword">from</span> <span class="token punctuation">.</span>forms <span class="token keyword">import</span> BlogForm<span class="token operator">-</span><span class="token operator">-</span> snip <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">def</span> <span class="token function">new_blog</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">!=</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> BlogForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        form <span class="token operator">=</span> BlogForm<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">)</span>        <span class="token keyword">if</span> form<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            form<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'blogs:blog'</span><span class="token punctuation">,</span> blog_id<span class="token operator">=</span>form<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>    context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'form'</span><span class="token punctuation">:</span> form<span class="token punctuation">}</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'blogs/new_blog.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们导入了函数 <code>redirect</code> ，用户提交文章后将会使用这个函数重定向到页面 blog 。函数 <code>redirect</code> 将视图名作为参数，并将用户重定向到这个视图。</p><h3 id="GET请求和POST请求"><a href="#GET请求和POST请求" class="headerlink" title="GET请求和POST请求"></a>GET请求和POST请求</h3><blockquote><p>摸鱼很久之后来更新一下QwQ，同时也是因为刚开学没什么事情要做</p></blockquote><p>创建 Web 应用程序时，将用到的两种请求类型是 GET 请求和 POST 请求。对于只是从服务器读取数据的页面，使用 GET 请求；在用户需要通过表单提交信息时，通常使用 POST 请求。</p><p>函数 <code>new_blog()</code> 将请求对象作为参数。用户初次请求该页面时，其浏览器会发送 GET 请求；用户填写并提交表单时，其浏览器会发送 POST 请求。</p><p>首先测试请求方法是 GET 还是 POST。如果请求方法不是 POST，请求就可能是GET，因此需要返回一个空表单。下面创建一个 <code>BlogForm</code> 实例，将其赋给变量 <code>form</code> ，再通过上下文字典 <code>context</code> 将这个表单发送给模板。</p><p>要将提交的信息保存到数据库，必须先通过检查确定它们是有效的。方法 <code>is_valid()</code> 核实用户填写了所有必不可少的字段，且与输入字段要求的字段类型一样，则可以调用 <code>save()</code> 保存到数据库。接着可以使用 <code>redirect()</code> 将用户的浏览器重定向到页面新创建的博客页面 <code>blog</code> 。</p><h3 id="模板-new-blog"><a href="#模板-new-blog" class="headerlink" title="模板 new_blog"></a>模板 new_blog</h3><p>在 <code>templates/blogs</code> 创建模板为 <code>templates/blogs/new_blog.html</code>:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">{% extends "blogs/base.html" %}{% block content %}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>blogs:new_blog<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    {% csrf_token %}    {% form.as_p %}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Add blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>{% endblock content %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个模板继承了 <code>base.html</code>，因此其基本结构与其他界面相同。实参 <code>action</code> 告诉服务器将提交的表单数据发送到哪里。这里将它发给视图函数 <code>new_blog()</code> 。实参 <code>method</code> 让浏览器以 POST 请求的方式提交数据。</p><p>Django 使用模板标签 <code>{% csrf_token %}</code> 来防止攻击者利用表单来获得对服务器未经授权的访问。<code>{{ form.as_p }}</code> 可以让 Django 自动创建显示表单所需的全部字段。修饰符 <code>as_p</code> 让 Django 以<strong>段落</strong>格式渲染所有表单元素。</p><h3 id="链接到页面-new-blog"><a href="#链接到页面-new-blog" class="headerlink" title="链接到页面 new_blog"></a>链接到页面 new_blog</h3><p>在页面 <code>blogs</code> 中添加到页面 <code>new_blog</code> 的链接：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">{% extends "blogs/base.html" %}{% block content %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>        -- snip --<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>blogs:new_blog<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>New blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>{% endblock content %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django搭建简易博客(4)</title>
      <link href="/2022/02/12/django-da-jian-jian-yi-bo-ke-4/"/>
      <url>/2022/02/12/django-da-jian-jian-yi-bo-ke-4/</url>
      
        <content type="html"><![CDATA[<h2 id="创建其他页面"><a href="#创建其他页面" class="headerlink" title="创建其他页面"></a>创建其他页面</h2><h3 id="模板继承"><a href="#模板继承" class="headerlink" title="模板继承"></a>模板继承</h3><p>创建网站时，一些通用元素几乎会在所有页面中出现。在这种情况下，可以编写一个包含通用元素的父模板，并让所有页面都继承这个模板，而不必在每个页面中重复定义这些通用元素。</p><h3 id="父模板"><a href="#父模板" class="headerlink" title="父模板"></a>父模板</h3><p>下面创建一个名为 <code>base.html</code> 的模板，并将其存储在 <code>index.html</code> 所在的目录中。这个模板包含所有页面都有的元素，而其他模板都继承它。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{% url <span class="token punctuation">'</span>blogs:index<span class="token punctuation">'</span> %}<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>BlogPost<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>{% block content %}{% endblock content %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里的模板标签 <code>{% url 'blogs:index' %}</code> 生成一个 URL，该 URL 与在 <code>blogs/urls.py</code> 中定义名为 <code>index</code> 的 URL 模式匹配。其中 <code>blogs</code> 是一个命名空间，这个命名空间来自文件 <code>blogs/urls.py</code> 中的 <code>app_name = blogs</code></p><h3 id="子模板"><a href="#子模板" class="headerlink" title="子模板"></a>子模板</h3><p>现在重写 <code>index.html</code> ，使其继承 <code>base.html</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">{% extends "blogs/base.html" %}{% block content %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Welcome to BlogPost<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>In BlogPost, you can share whatever you want to share!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>{% endblock content %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子模版的第一行必须包含标签 <code>{% extends %}</code> , 让 Django 直到它继承了哪个父模板。下面插入了一个名为 <code>content</code> 的 <code>{% block %}` 标签，以定义 `content` 块。不是从父模板继承的内容都包含在 `content` 块中。使用标签 `{% endblock %}</code> 指出内容的结束位置。在标签 <code>{% endblock %}</code> 中不是必须指出块名，但是如果模板包括多个块，指定块名有助于确定结束的是哪个块。</p><h3 id="显示所有的博客文章"><a href="#显示所有的博客文章" class="headerlink" title="显示所有的博客文章"></a>显示所有的博客文章</h3><h4 id="URL模式"><a href="#URL模式" class="headerlink" title="URL模式"></a>URL模式</h4><p>修改 <code>blogs/urls.py</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">-</span><span class="token operator">-</span> snip <span class="token operator">-</span><span class="token operator">-</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>index<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'blogs/'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>blogs<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'blogs'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><p>函数 <code>blogs()</code> 需要从数据库中获取一些数据，并将其交给模板。需要在 <code>views.py</code> 中添加的代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> BlogPost<span class="token operator">-</span><span class="token operator">-</span> snip <span class="token operator">-</span><span class="token operator">-</span><span class="token keyword">def</span> <span class="token function">blogs</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    blogs <span class="token operator">=</span> BlogPost<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">'-date_added'</span><span class="token punctuation">)</span>    context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'blogs'</span><span class="token punctuation">:</span> blogs<span class="token punctuation">}</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'blogs/blogs.html'</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先导入与所需数据相关联的模型 <code>BlogPost</code> 。函数 <code>blogs()</code> 包含一个形参：Django 从服务器那里收到的 request 对象。</p><p>定义了一个将发送给模板的上下文 <code>context</code> 。上下文是一个字典，其中的键是将在模板中用来访问数据的名称，而值是要发送给模板的数据。</p><h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><p>显示所有博客的页面的模板接受字典 <code>context</code>，以便使用 <code>blogs()</code> 提供的数据。创建一个文件 <code>blogs.html</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html">{% extends "blogs/base.html" %}{% block content %}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>      {% for topic in topics %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>{{ topic }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>      {% empty %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>No blogs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>      {% endfor %}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>{% endblock content %}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>待更新 懒~</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django搭建简易博客(3)</title>
      <link href="/2022/02/12/django-da-jian-jian-yi-bo-ke-3/"/>
      <url>/2022/02/12/django-da-jian-jian-yi-bo-ke-3/</url>
      
        <content type="html"><![CDATA[<h2 id="创建页面：-学习笔记主页"><a href="#创建页面：-学习笔记主页" class="headerlink" title="创建页面： 学习笔记主页"></a>创建页面： 学习笔记主页</h2><blockquote><p>请牢记：使用 Django 创建页面的过程分为三个阶段： 定义URL，编写视图和编写模板（按什么顺序完成这三个阶段无关紧要）</p></blockquote><h3 id="映射URL"><a href="#映射URL" class="headerlink" title="映射URL"></a>映射URL</h3><blockquote><p>每个 URL 都被映射到特定的试图——试图函数获取并处理页面所有数据。视图函数通常使用<strong>模板</strong>来渲染页面。</p></blockquote><p>主页的 URL 最重要，它是用户用来访问项目的基础 URL。当前，基础 URL （127.0.0.1:8000) 返回默认的 Django 网站。</p><p>打开项目主文件夹 Blog 中的文件 <code>urls.py</code>， 你将看到：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> pathurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了让项目程序能够包含应用程序 blogs 的 URL，将代码修改为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token punctuation">,</span> includeurlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">'blogs.urls'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：接下来需要在文件夹 blogs 中创建一个urls.py 文件，大概树形结构如下：</p></blockquote><pre class="line-numbers language-none"><code class="language-none">├── admin.py├── apps.py├── __init__.py├── migrations├──├── models.py├── tests.py├── urls.py└── views.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>urls.py</code> 中输入代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> viewsapp_name <span class="token operator">=</span> <span class="token string">'blogs'</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>index<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># 主页</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>请注意：views.index 将在下面编写</p></blockquote><p>变量 <code>app_name</code> 让 Django 能够将这个 urls.py 文件同项目内其他应用程序中的同名文件区分开来</p><p>变量 <code>urlpatterns</code> 是一个列表，包含可以在应用程序 blogs 中请求的页面</p><p>实际的 URL 模式是对函数 <code>path()</code> 的调用，这个函数接受三个实参：第一个参数是路由(route)，第二个参数指定了调用 <code>views.py</code> 中的哪个函数，第三个参数指定这个 URL 模式的名称，<strong>让我们能够在代码的其他地方引用它，每当需要提供这个主页的链接时，都将使用这个名称，而不是 URL</strong></p><h3 id="编写视图"><a href="#编写视图" class="headerlink" title="编写视图"></a>编写视图</h3><blockquote><p>视图函数接受请求中的信息，准备好生成页面所需的数据，再将这些数据发送给浏览器</p></blockquote><p>在文件夹 blogs 中的 <code>views.py</code> 中添加为主页编写视图的代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token comment"># Create your views here.</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'blogs/index.html'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>URL 请求与刚才定义的模式匹配时，Django将在文件 view.py 中查找函数 <code>index()</code>，再将对象 <code>request</code> 传递给这个视图函数</p><h3 id="编写模板"><a href="#编写模板" class="headerlink" title="编写模板"></a>编写模板</h3><blockquote><p>模板定义页面的外观，而每当页面被请求时，Django将填入相关的数据。模板让你能够访问视图提供的任何数据。</p></blockquote><p>在文件夹 blogs 中新建一个文件夹，并将其命名为 templates 。在文件夹 templates 中，再创建一个文件夹，并将其命名为 blogs 。在 blogs 里面创建一个文件 <code>index.html</code>（这个文件的路径为<code>blogs/templates/blogs/index.html</code>，并且编写如下代码：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Welcome to BlogPost<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>In BlogPost, you can share whatever you want to share!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>现在，如果请求这个项目的主页，就可以看到上述页面。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django搭建简易博客(2)</title>
      <link href="/2022/02/12/django-da-jian-jian-yi-bo-ke-2/"/>
      <url>/2022/02/12/django-da-jian-jian-yi-bo-ke-2/</url>
      
        <content type="html"><![CDATA[<h2 id="Django管理网站"><a href="#Django管理网站" class="headerlink" title="Django管理网站"></a>Django管理网站</h2><h3 id="创建超级用户"><a href="#创建超级用户" class="headerlink" title="创建超级用户"></a>创建超级用户</h3><p>Django 允许创建具备所有权限的用户，即<strong>超级用户</strong>。<strong>权限</strong>决定了用户可执行的操作。注册用户通常可以阅读自己的私有数据，还可以查看一些只有会员才能查看的信息。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python manage.py createsuperuser<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行命令<code>createsuperuser</code>时，Django 会提示输入超级用户的用户名，邮箱（可为空），以及两次密码。</p><h3 id="向管理网站注册模型"><a href="#向管理网站注册模型" class="headerlink" title="向管理网站注册模型"></a>向管理网站注册模型</h3><p>Django 自动在管理网站中添加了一些模型， 如 User 和 Group， 但对于我们创建的模型，必须手工进行注册。</p><p>在 blog 的 <code>admin.py</code> 中，注册模型 <code>BlogPost</code>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> BlogPost<span class="token comment"># Register your models here.</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>BlogPost<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django搭建简易博客(1)</title>
      <link href="/2022/02/11/django-da-jian-jian-yi-bo-ke-1/"/>
      <url>/2022/02/11/django-da-jian-jian-yi-bo-ke-1/</url>
      
        <content type="html"><![CDATA[<h2 id="创建Django项目"><a href="#创建Django项目" class="headerlink" title="创建Django项目"></a>创建Django项目</h2><p>创建名为“Blog”的django项目程序：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">django-admin startproject Blog <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>一定要有这个 “.”   它可以让项目拥有合适的目录结构</p></blockquote><p> Django将大部分与项目相关的信息存储在数据库当中，因此需要创建一个供Django使用的数据库。Django默认的数据库为sqlite，这里我们将其改为MySQL：</p><p>找到<code>settings.py</code>中的<code>DATABASES</code>，将其改为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'blogpost'</span><span class="token punctuation">,</span>   <span class="token comment"># 你数据库的名称</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">'*******'</span><span class="token punctuation">,</span><span class="token comment"># 你的密码</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token number">3306</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着迁移数据库：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python manage.py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看项目效果：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python manage.py runserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>按Ctrl + C退出</p></blockquote><p>可以看到项目是英文的，可以在<code>settings.py</code>中找到并修改：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">'zh-Hans'</span>TIME_ZONE <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="创建Django应用程序"><a href="#创建Django应用程序" class="headerlink" title="创建Django应用程序"></a>创建Django应用程序</h2><h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h3><p>创建名为“blog”的应用程序：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python manage.py startapp blogs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着在<code>blogs/models.py</code>当中定义模型：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">BlogPost</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    objects <span class="token operator">=</span> models<span class="token punctuation">.</span>Manager<span class="token punctuation">(</span><span class="token punctuation">)</span>    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token comment"># 博客标题</span>    text <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token comment"># 博客正文</span>    date_added <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 博客日期</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title <span class="token comment"># 返回模型的字符串表示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们创建了一个名为 “BlogPost” 的模型，继承了Django中模型基本功能，并且我们添加了三个属性：title、text、date_added</p><p>属性 text 和 title 是由 <code>CharFiled</code> 组成的，即由字符组成的数据，其中参数 <code>max_length</code> 为最大长度</p><p>属性 date_added 是用 <code>DateTimeField</code> 组成的， 记录日期和时间，参数 <code>auto_now_add = True</code> 表示每当用户创建一个新博客时，都会自动的设置为当前日期和时间</p><h3 id="激活模型"><a href="#激活模型" class="headerlink" title="激活模型"></a>激活模型</h3><p>打开<code>settings.py</code>，找到</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后将其修改为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">INSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token comment"># 我的应用程序</span>    <span class="token string">'blogs'</span><span class="token punctuation">,</span><span class="token comment"># 默认添加的应用程序</span>    <span class="token string">'django.contrib.admin'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.auth'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.contenttypes'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.sessions'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.messages'</span><span class="token punctuation">,</span>    <span class="token string">'django.contrib.staticfiles'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>务必将自己创建的应用程序放在默认应用程序的前面，这样就能够覆盖默认程序的行为</p></blockquote><p>接下来需要让 Django 修改数据库，使其能够存储与模型 BlogPost 相关的信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python manage.py makemigrations blogspython manage.py migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>每当修改 <code>models.py</code> 中的数据时，都需要对应用程序进行 <code>makemigrations</code> 并且 <code>migrate</code></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/02/11/hello-world/"/>
      <url>/2022/02/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
